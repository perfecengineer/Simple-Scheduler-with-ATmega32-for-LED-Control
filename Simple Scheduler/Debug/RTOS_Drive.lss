
RTOS_Drive.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001240  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00001240  000012d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000036  00800062  00800062  000012d6  2**0
                  ALLOC
  3 .stab         00001ed8  00000000  00000000  000012d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000010d5  00000000  00000000  000031b0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 34 04 	jmp	0x868	; 0x868 <__vector_1>
       8:	0c 94 67 04 	jmp	0x8ce	; 0x8ce <__vector_2>
       c:	0c 94 9a 04 	jmp	0x934	; 0x934 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 67 02 	jmp	0x4ce	; 0x4ce <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e4       	ldi	r30, 0x40	; 64
      68:	f2 e1       	ldi	r31, 0x12	; 18
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 36       	cpi	r26, 0x62	; 98
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a2 e6       	ldi	r26, 0x62	; 98
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 39       	cpi	r26, 0x98	; 152
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 ca 08 	call	0x1194	; 0x1194 <main>
      8a:	0c 94 1e 09 	jmp	0x123c	; 0x123c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <SCHEDULER_init>:
#include "rto_configuration.h"
/********** Create array of structure task control block for tasks ***/
static TaskControlBlock TASkS[NUMBER_OF_TASKS];
/*** This function set the timer to calculate the tick time of scheduler ***/
void SCHEDULER_init(void)
{
      92:	df 93       	push	r29
      94:	cf 93       	push	r28
      96:	cd b7       	in	r28, 0x3d	; 61
      98:	de b7       	in	r29, 0x3e	; 62

	/******* SetCallBackFunction to set ISR of timer tack the scheduler mechanism function ***/
//	TIMERS_setCallBackFunction(SELECTION_TIMER,NORMAL_MODE,NUMBER_OF_INTERRUPT_TO_ACHIEVE_TICK_TIME,PRE_LOAD_VALUE,&SCHEDULER_andDispatcherHandling);
	TIMERS_setCallBackFunction(SELECTION_TIMER,NORMAL_MODE,NUMBER_OF_INTERRUPT_TO_ACHIEVE_TICK_TIME,&SCHEDULER_andDispatcherHandling);
      9a:	29 eb       	ldi	r18, 0xB9	; 185
      9c:	30 e0       	ldi	r19, 0x00	; 0
      9e:	80 e0       	ldi	r24, 0x00	; 0
      a0:	60 e0       	ldi	r22, 0x00	; 0
      a2:	48 e0       	ldi	r20, 0x08	; 8
      a4:	0e 94 1c 02 	call	0x438	; 0x438 <TIMERS_setCallBackFunction>
	DUTY_cycleForTimers(SELECTION_TIMER,0,PRE_LOAD_VALUE);
      a8:	80 e0       	ldi	r24, 0x00	; 0
      aa:	60 e0       	ldi	r22, 0x00	; 0
      ac:	70 e0       	ldi	r23, 0x00	; 0
      ae:	46 e0       	ldi	r20, 0x06	; 6
      b0:	50 e0       	ldi	r21, 0x00	; 0
      b2:	0e 94 f7 01 	call	0x3ee	; 0x3ee <DUTY_cycleForTimers>
	/**** in_it of timer**********/
	iniat_Timer();
      b6:	0e 94 34 01 	call	0x268	; 0x268 <iniat_Timer>
}
      ba:	cf 91       	pop	r28
      bc:	df 91       	pop	r29
      be:	08 95       	ret

000000c0 <TASK_controlBlockOfTask>:
/*** This respond to create task control block and its function ***/
uint8 TASK_controlBlockOfTask(uint8 PassedPeriorty,uint16 PassedPeriodicity,uint16 PassedFristDelay,void(*PassedPtrFunction)(void))
{
      c0:	df 93       	push	r29
      c2:	cf 93       	push	r28
      c4:	cd b7       	in	r28, 0x3d	; 61
      c6:	de b7       	in	r29, 0x3e	; 62
      c8:	28 97       	sbiw	r28, 0x08	; 8
      ca:	0f b6       	in	r0, 0x3f	; 63
      cc:	f8 94       	cli
      ce:	de bf       	out	0x3e, r29	; 62
      d0:	0f be       	out	0x3f, r0	; 63
      d2:	cd bf       	out	0x3d, r28	; 61
      d4:	8a 83       	std	Y+2, r24	; 0x02
      d6:	7c 83       	std	Y+4, r23	; 0x04
      d8:	6b 83       	std	Y+3, r22	; 0x03
      da:	5e 83       	std	Y+6, r21	; 0x06
      dc:	4d 83       	std	Y+5, r20	; 0x05
      de:	38 87       	std	Y+8, r19	; 0x08
      e0:	2f 83       	std	Y+7, r18	; 0x07
	uint8 LocalErrorStat = NOTOK;
      e2:	19 82       	std	Y+1, r1	; 0x01
	if((PassedPeriorty < NUMBER_OF_TASKS) && PassedPtrFunction != NULL_PTR)
      e4:	8a 81       	ldd	r24, Y+2	; 0x02
      e6:	83 30       	cpi	r24, 0x03	; 3
      e8:	d0 f5       	brcc	.+116    	; 0x15e <TASK_controlBlockOfTask+0x9e>
      ea:	8f 81       	ldd	r24, Y+7	; 0x07
      ec:	98 85       	ldd	r25, Y+8	; 0x08
      ee:	00 97       	sbiw	r24, 0x00	; 0
      f0:	b1 f1       	breq	.+108    	; 0x15e <TASK_controlBlockOfTask+0x9e>
	{
		TASkS[PassedPeriorty].Peroidicity = PassedPeriodicity ;
      f2:	8a 81       	ldd	r24, Y+2	; 0x02
      f4:	28 2f       	mov	r18, r24
      f6:	30 e0       	ldi	r19, 0x00	; 0
      f8:	c9 01       	movw	r24, r18
      fa:	88 0f       	add	r24, r24
      fc:	99 1f       	adc	r25, r25
      fe:	82 0f       	add	r24, r18
     100:	93 1f       	adc	r25, r19
     102:	88 0f       	add	r24, r24
     104:	99 1f       	adc	r25, r25
     106:	fc 01       	movw	r30, r24
     108:	ee 59       	subi	r30, 0x9E	; 158
     10a:	ff 4f       	sbci	r31, 0xFF	; 255
     10c:	8b 81       	ldd	r24, Y+3	; 0x03
     10e:	9c 81       	ldd	r25, Y+4	; 0x04
     110:	91 83       	std	Z+1, r25	; 0x01
     112:	80 83       	st	Z, r24
		TASkS[PassedPeriorty].FristDelay = PassedFristDelay ;
     114:	8a 81       	ldd	r24, Y+2	; 0x02
     116:	28 2f       	mov	r18, r24
     118:	30 e0       	ldi	r19, 0x00	; 0
     11a:	c9 01       	movw	r24, r18
     11c:	88 0f       	add	r24, r24
     11e:	99 1f       	adc	r25, r25
     120:	82 0f       	add	r24, r18
     122:	93 1f       	adc	r25, r19
     124:	01 96       	adiw	r24, 0x01	; 1
     126:	88 0f       	add	r24, r24
     128:	99 1f       	adc	r25, r25
     12a:	fc 01       	movw	r30, r24
     12c:	ee 59       	subi	r30, 0x9E	; 158
     12e:	ff 4f       	sbci	r31, 0xFF	; 255
     130:	8d 81       	ldd	r24, Y+5	; 0x05
     132:	9e 81       	ldd	r25, Y+6	; 0x06
     134:	91 83       	std	Z+1, r25	; 0x01
     136:	80 83       	st	Z, r24
		TASkS[PassedPeriorty].PointerToFunctionOfTask = PassedPtrFunction;
     138:	8a 81       	ldd	r24, Y+2	; 0x02
     13a:	28 2f       	mov	r18, r24
     13c:	30 e0       	ldi	r19, 0x00	; 0
     13e:	c9 01       	movw	r24, r18
     140:	88 0f       	add	r24, r24
     142:	99 1f       	adc	r25, r25
     144:	82 0f       	add	r24, r18
     146:	93 1f       	adc	r25, r19
     148:	88 0f       	add	r24, r24
     14a:	99 1f       	adc	r25, r25
     14c:	fc 01       	movw	r30, r24
     14e:	ea 59       	subi	r30, 0x9A	; 154
     150:	ff 4f       	sbci	r31, 0xFF	; 255
     152:	8f 81       	ldd	r24, Y+7	; 0x07
     154:	98 85       	ldd	r25, Y+8	; 0x08
     156:	91 83       	std	Z+1, r25	; 0x01
     158:	80 83       	st	Z, r24

		LocalErrorStat = OK;
     15a:	81 e0       	ldi	r24, 0x01	; 1
     15c:	89 83       	std	Y+1, r24	; 0x01
	}
	return LocalErrorStat;
     15e:	89 81       	ldd	r24, Y+1	; 0x01
}
     160:	28 96       	adiw	r28, 0x08	; 8
     162:	0f b6       	in	r0, 0x3f	; 63
     164:	f8 94       	cli
     166:	de bf       	out	0x3e, r29	; 62
     168:	0f be       	out	0x3f, r0	; 63
     16a:	cd bf       	out	0x3d, r28	; 61
     16c:	cf 91       	pop	r28
     16e:	df 91       	pop	r29
     170:	08 95       	ret

00000172 <SCHEDULER_andDispatcherHandling>:
/*** This function of scheduler and dispatcher mechanism ***/
static void SCHEDULER_andDispatcherHandling(void)
{
     172:	df 93       	push	r29
     174:	cf 93       	push	r28
     176:	0f 92       	push	r0
     178:	cd b7       	in	r28, 0x3d	; 61
     17a:	de b7       	in	r29, 0x3e	; 62
	uint8 LocalCounter;
	for(LocalCounter = 0; LocalCounter < NUMBER_OF_TASKS;  LocalCounter ++)
     17c:	19 82       	std	Y+1, r1	; 0x01
     17e:	6c c0       	rjmp	.+216    	; 0x258 <SCHEDULER_andDispatcherHandling+0xe6>
	{
		if(!TASkS[LocalCounter].FristDelay)
     180:	89 81       	ldd	r24, Y+1	; 0x01
     182:	28 2f       	mov	r18, r24
     184:	30 e0       	ldi	r19, 0x00	; 0
     186:	c9 01       	movw	r24, r18
     188:	88 0f       	add	r24, r24
     18a:	99 1f       	adc	r25, r25
     18c:	82 0f       	add	r24, r18
     18e:	93 1f       	adc	r25, r19
     190:	01 96       	adiw	r24, 0x01	; 1
     192:	88 0f       	add	r24, r24
     194:	99 1f       	adc	r25, r25
     196:	fc 01       	movw	r30, r24
     198:	ee 59       	subi	r30, 0x9E	; 158
     19a:	ff 4f       	sbci	r31, 0xFF	; 255
     19c:	80 81       	ld	r24, Z
     19e:	91 81       	ldd	r25, Z+1	; 0x01
     1a0:	00 97       	sbiw	r24, 0x00	; 0
     1a2:	a1 f5       	brne	.+104    	; 0x20c <SCHEDULER_andDispatcherHandling+0x9a>
		{
			TASkS[LocalCounter].PointerToFunctionOfTask();
     1a4:	89 81       	ldd	r24, Y+1	; 0x01
     1a6:	28 2f       	mov	r18, r24
     1a8:	30 e0       	ldi	r19, 0x00	; 0
     1aa:	c9 01       	movw	r24, r18
     1ac:	88 0f       	add	r24, r24
     1ae:	99 1f       	adc	r25, r25
     1b0:	82 0f       	add	r24, r18
     1b2:	93 1f       	adc	r25, r19
     1b4:	88 0f       	add	r24, r24
     1b6:	99 1f       	adc	r25, r25
     1b8:	fc 01       	movw	r30, r24
     1ba:	ea 59       	subi	r30, 0x9A	; 154
     1bc:	ff 4f       	sbci	r31, 0xFF	; 255
     1be:	01 90       	ld	r0, Z+
     1c0:	f0 81       	ld	r31, Z
     1c2:	e0 2d       	mov	r30, r0
     1c4:	09 95       	icall
			TASkS[LocalCounter].FristDelay = TASkS[LocalCounter].Peroidicity -TICK_TIME_INTERRUPT ;
     1c6:	89 81       	ldd	r24, Y+1	; 0x01
     1c8:	48 2f       	mov	r20, r24
     1ca:	50 e0       	ldi	r21, 0x00	; 0
     1cc:	89 81       	ldd	r24, Y+1	; 0x01
     1ce:	28 2f       	mov	r18, r24
     1d0:	30 e0       	ldi	r19, 0x00	; 0
     1d2:	c9 01       	movw	r24, r18
     1d4:	88 0f       	add	r24, r24
     1d6:	99 1f       	adc	r25, r25
     1d8:	82 0f       	add	r24, r18
     1da:	93 1f       	adc	r25, r19
     1dc:	88 0f       	add	r24, r24
     1de:	99 1f       	adc	r25, r25
     1e0:	fc 01       	movw	r30, r24
     1e2:	ee 59       	subi	r30, 0x9E	; 158
     1e4:	ff 4f       	sbci	r31, 0xFF	; 255
     1e6:	80 81       	ld	r24, Z
     1e8:	91 81       	ldd	r25, Z+1	; 0x01
     1ea:	9c 01       	movw	r18, r24
     1ec:	22 50       	subi	r18, 0x02	; 2
     1ee:	30 40       	sbci	r19, 0x00	; 0
     1f0:	ca 01       	movw	r24, r20
     1f2:	88 0f       	add	r24, r24
     1f4:	99 1f       	adc	r25, r25
     1f6:	84 0f       	add	r24, r20
     1f8:	95 1f       	adc	r25, r21
     1fa:	01 96       	adiw	r24, 0x01	; 1
     1fc:	88 0f       	add	r24, r24
     1fe:	99 1f       	adc	r25, r25
     200:	fc 01       	movw	r30, r24
     202:	ee 59       	subi	r30, 0x9E	; 158
     204:	ff 4f       	sbci	r31, 0xFF	; 255
     206:	31 83       	std	Z+1, r19	; 0x01
     208:	20 83       	st	Z, r18
     20a:	23 c0       	rjmp	.+70     	; 0x252 <SCHEDULER_andDispatcherHandling+0xe0>
		}
		else
		{
			TASkS[LocalCounter].FristDelay -= TICK_TIME_INTERRUPT;	// TASkS[LocalCounter].FristDelay - tick time
     20c:	89 81       	ldd	r24, Y+1	; 0x01
     20e:	48 2f       	mov	r20, r24
     210:	50 e0       	ldi	r21, 0x00	; 0
     212:	89 81       	ldd	r24, Y+1	; 0x01
     214:	28 2f       	mov	r18, r24
     216:	30 e0       	ldi	r19, 0x00	; 0
     218:	c9 01       	movw	r24, r18
     21a:	88 0f       	add	r24, r24
     21c:	99 1f       	adc	r25, r25
     21e:	82 0f       	add	r24, r18
     220:	93 1f       	adc	r25, r19
     222:	01 96       	adiw	r24, 0x01	; 1
     224:	88 0f       	add	r24, r24
     226:	99 1f       	adc	r25, r25
     228:	fc 01       	movw	r30, r24
     22a:	ee 59       	subi	r30, 0x9E	; 158
     22c:	ff 4f       	sbci	r31, 0xFF	; 255
     22e:	80 81       	ld	r24, Z
     230:	91 81       	ldd	r25, Z+1	; 0x01
     232:	9c 01       	movw	r18, r24
     234:	22 50       	subi	r18, 0x02	; 2
     236:	30 40       	sbci	r19, 0x00	; 0
     238:	ca 01       	movw	r24, r20
     23a:	88 0f       	add	r24, r24
     23c:	99 1f       	adc	r25, r25
     23e:	84 0f       	add	r24, r20
     240:	95 1f       	adc	r25, r21
     242:	01 96       	adiw	r24, 0x01	; 1
     244:	88 0f       	add	r24, r24
     246:	99 1f       	adc	r25, r25
     248:	fc 01       	movw	r30, r24
     24a:	ee 59       	subi	r30, 0x9E	; 158
     24c:	ff 4f       	sbci	r31, 0xFF	; 255
     24e:	31 83       	std	Z+1, r19	; 0x01
     250:	20 83       	st	Z, r18
}
/*** This function of scheduler and dispatcher mechanism ***/
static void SCHEDULER_andDispatcherHandling(void)
{
	uint8 LocalCounter;
	for(LocalCounter = 0; LocalCounter < NUMBER_OF_TASKS;  LocalCounter ++)
     252:	89 81       	ldd	r24, Y+1	; 0x01
     254:	8f 5f       	subi	r24, 0xFF	; 255
     256:	89 83       	std	Y+1, r24	; 0x01
     258:	89 81       	ldd	r24, Y+1	; 0x01
     25a:	83 30       	cpi	r24, 0x03	; 3
     25c:	08 f4       	brcc	.+2      	; 0x260 <SCHEDULER_andDispatcherHandling+0xee>
     25e:	90 cf       	rjmp	.-224    	; 0x180 <SCHEDULER_andDispatcherHandling+0xe>
		{
			TASkS[LocalCounter].FristDelay -= TICK_TIME_INTERRUPT;	// TASkS[LocalCounter].FristDelay - tick time
		}
	}

}
     260:	0f 90       	pop	r0
     262:	cf 91       	pop	r28
     264:	df 91       	pop	r29
     266:	08 95       	ret

00000268 <iniat_Timer>:
/*** Array to store the counts the interrupts for each timer ***/
static uint8 Counter[TIMERS_NUMBERS] = {0};
#endif
#endif
void iniat_Timer(void)
{
     268:	df 93       	push	r29
     26a:	cf 93       	push	r28
     26c:	cd b7       	in	r28, 0x3d	; 61
     26e:	de b7       	in	r29, 0x3e	; 62

/************* Select mode for timer 0 ****************************/
	#if 	TIMER0_SELECTION_MODE   ==	NORMAL_MODE
/*************** Enable interrupt for overflow mode for timer 0*******/

				SET_BIT(CONTROL_REG_TIMER0,TIMER0_CTC_ACTIVE_BIT);
     270:	a3 e5       	ldi	r26, 0x53	; 83
     272:	b0 e0       	ldi	r27, 0x00	; 0
     274:	e3 e5       	ldi	r30, 0x53	; 83
     276:	f0 e0       	ldi	r31, 0x00	; 0
     278:	80 81       	ld	r24, Z
     27a:	80 68       	ori	r24, 0x80	; 128
     27c:	8c 93       	st	X, r24
				CLEAR_BIT(CONTROL_REG_TIMER0,TIMER0_WAVEFORM_BIT0);
     27e:	a3 e5       	ldi	r26, 0x53	; 83
     280:	b0 e0       	ldi	r27, 0x00	; 0
     282:	e3 e5       	ldi	r30, 0x53	; 83
     284:	f0 e0       	ldi	r31, 0x00	; 0
     286:	80 81       	ld	r24, Z
     288:	8f 7b       	andi	r24, 0xBF	; 191
     28a:	8c 93       	st	X, r24
				CLEAR_BIT(CONTROL_REG_TIMER0,TIMER0_WAVEFORM_BIT1);
     28c:	a3 e5       	ldi	r26, 0x53	; 83
     28e:	b0 e0       	ldi	r27, 0x00	; 0
     290:	e3 e5       	ldi	r30, 0x53	; 83
     292:	f0 e0       	ldi	r31, 0x00	; 0
     294:	80 81       	ld	r24, Z
     296:	87 7f       	andi	r24, 0xF7	; 247
     298:	8c 93       	st	X, r24
				#if TIMER0_INTERRUPT_TECHNIQE       ==      ENABLE
				/*************** Enable interrupt for overflow mode for timer 0 ***/
					SET_BIT(MASKABLE_REG_TIMERS,TIMER0_OVERFLOW_ENABLE_BIT);
     29a:	a9 e5       	ldi	r26, 0x59	; 89
     29c:	b0 e0       	ldi	r27, 0x00	; 0
     29e:	e9 e5       	ldi	r30, 0x59	; 89
     2a0:	f0 e0       	ldi	r31, 0x00	; 0
     2a2:	80 81       	ld	r24, Z
     2a4:	81 60       	ori	r24, 0x01	; 1
     2a6:	8c 93       	st	X, r24
	#endif

/************* Select the output mode for timer 0 ****************************/

	#if 	TIMER0_SELECTION_OUTPUT_COMPARE_MODE   ==	DISCONNECT_MODE
				CLEAR_BIT(CONTROL_REG_TIMER0,TIMER0_OUTPUT_MODE_BIT0);
     2a8:	a3 e5       	ldi	r26, 0x53	; 83
     2aa:	b0 e0       	ldi	r27, 0x00	; 0
     2ac:	e3 e5       	ldi	r30, 0x53	; 83
     2ae:	f0 e0       	ldi	r31, 0x00	; 0
     2b0:	80 81       	ld	r24, Z
     2b2:	8f 7e       	andi	r24, 0xEF	; 239
     2b4:	8c 93       	st	X, r24
				CLEAR_BIT(CONTROL_REG_TIMER0,TIMER0_OUTPUT_MODE_BIT1);
     2b6:	a3 e5       	ldi	r26, 0x53	; 83
     2b8:	b0 e0       	ldi	r27, 0x00	; 0
     2ba:	e3 e5       	ldi	r30, 0x53	; 83
     2bc:	f0 e0       	ldi	r31, 0x00	; 0
     2be:	80 81       	ld	r24, Z
     2c0:	8f 7d       	andi	r24, 0xDF	; 223
     2c2:	8c 93       	st	X, r24
	#if 	TIMER0_CLOCK_SELECT		==		NO_CLK_SOURSE
				CLEAR_BIT(CONTROL_REG_TIMER0,TIMER0_CLOCK_SELECT_BIT0);
				CLEAR_BIT(CONTROL_REG_TIMER0,TIMER0_CLOCK_SELECT_BIT1);
				CLEAR_BIT(CONTROL_REG_TIMER0,TIMER0_CLOCK_SELECT_BIT2);
	#elif 	TIMER0_CLOCK_SELECT		==		CLK_1
				SET_BIT(CONTROL_REG_TIMER0,TIMER0_CLOCK_SELECT_BIT0);
     2c4:	a3 e5       	ldi	r26, 0x53	; 83
     2c6:	b0 e0       	ldi	r27, 0x00	; 0
     2c8:	e3 e5       	ldi	r30, 0x53	; 83
     2ca:	f0 e0       	ldi	r31, 0x00	; 0
     2cc:	80 81       	ld	r24, Z
     2ce:	81 60       	ori	r24, 0x01	; 1
     2d0:	8c 93       	st	X, r24
				CLEAR_BIT(CONTROL_REG_TIMER0,TIMER0_CLOCK_SELECT_BIT1);
     2d2:	a3 e5       	ldi	r26, 0x53	; 83
     2d4:	b0 e0       	ldi	r27, 0x00	; 0
     2d6:	e3 e5       	ldi	r30, 0x53	; 83
     2d8:	f0 e0       	ldi	r31, 0x00	; 0
     2da:	80 81       	ld	r24, Z
     2dc:	8d 7f       	andi	r24, 0xFD	; 253
     2de:	8c 93       	st	X, r24
				CLEAR_BIT(CONTROL_REG_TIMER0,TIMER0_CLOCK_SELECT_BIT2);
     2e0:	a3 e5       	ldi	r26, 0x53	; 83
     2e2:	b0 e0       	ldi	r27, 0x00	; 0
     2e4:	e3 e5       	ldi	r30, 0x53	; 83
     2e6:	f0 e0       	ldi	r31, 0x00	; 0
     2e8:	80 81       	ld	r24, Z
     2ea:	8b 7f       	andi	r24, 0xFB	; 251
     2ec:	8c 93       	st	X, r24

/************************************* for counter 2 **************************************************/
#elif SELECTION_MODULE2     ==     COUNTER2_ENABLE
/****************************** For falling edge ******************************************************/
	#if		SELECTION_EDGE_COUNTER2   		==	  FALLAING_EDGE
				CLEAR_BIT(CONTROL_REG_TIMER2,TIMER2_CLOCK_SELECT_BIT0);
     2ee:	a5 e4       	ldi	r26, 0x45	; 69
     2f0:	b0 e0       	ldi	r27, 0x00	; 0
     2f2:	e5 e4       	ldi	r30, 0x45	; 69
     2f4:	f0 e0       	ldi	r31, 0x00	; 0
     2f6:	80 81       	ld	r24, Z
     2f8:	8e 7f       	andi	r24, 0xFE	; 254
     2fa:	8c 93       	st	X, r24
				SET_BIT(CONTROL_REG_TIMER2,TIMER2_CLOCK_SELECT_BIT1);
     2fc:	a5 e4       	ldi	r26, 0x45	; 69
     2fe:	b0 e0       	ldi	r27, 0x00	; 0
     300:	e5 e4       	ldi	r30, 0x45	; 69
     302:	f0 e0       	ldi	r31, 0x00	; 0
     304:	80 81       	ld	r24, Z
     306:	82 60       	ori	r24, 0x02	; 2
     308:	8c 93       	st	X, r24
				SET_BIT(CONTROL_REG_TIMER2,TIMER2_CLOCK_SELECT_BIT2);
     30a:	a5 e4       	ldi	r26, 0x45	; 69
     30c:	b0 e0       	ldi	r27, 0x00	; 0
     30e:	e5 e4       	ldi	r30, 0x45	; 69
     310:	f0 e0       	ldi	r31, 0x00	; 0
     312:	80 81       	ld	r24, Z
     314:	84 60       	ori	r24, 0x04	; 4
     316:	8c 93       	st	X, r24
				SET_BIT(CONTROL_REG_TIMER2,TIMER2_CLOCK_SELECT_BIT0);
				SET_BIT(CONTROL_REG_TIMER2,TIMER2_CLOCK_SELECT_BIT1);
				SET_BIT(CONTROL_REG_TIMER2,TIMER2_CLOCK_SELECT_BIT2);
					#endif
#endif
}
     318:	cf 91       	pop	r28
     31a:	df 91       	pop	r29
     31c:	08 95       	ret

0000031e <disable_Timer>:
uint8 disable_Timer(uint8 timer_selection)
{
     31e:	df 93       	push	r29
     320:	cf 93       	push	r28
     322:	00 d0       	rcall	.+0      	; 0x324 <disable_Timer+0x6>
     324:	00 d0       	rcall	.+0      	; 0x326 <disable_Timer+0x8>
     326:	cd b7       	in	r28, 0x3d	; 61
     328:	de b7       	in	r29, 0x3e	; 62
     32a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 ERROR_STATE = OK;
     32c:	81 e0       	ldi	r24, 0x01	; 1
     32e:	89 83       	std	Y+1, r24	; 0x01
	switch(timer_selection)
     330:	8a 81       	ldd	r24, Y+2	; 0x02
     332:	28 2f       	mov	r18, r24
     334:	30 e0       	ldi	r19, 0x00	; 0
     336:	3c 83       	std	Y+4, r19	; 0x04
     338:	2b 83       	std	Y+3, r18	; 0x03
     33a:	8b 81       	ldd	r24, Y+3	; 0x03
     33c:	9c 81       	ldd	r25, Y+4	; 0x04
     33e:	81 30       	cpi	r24, 0x01	; 1
     340:	91 05       	cpc	r25, r1
     342:	01 f1       	breq	.+64     	; 0x384 <disable_Timer+0x66>
     344:	2b 81       	ldd	r18, Y+3	; 0x03
     346:	3c 81       	ldd	r19, Y+4	; 0x04
     348:	22 30       	cpi	r18, 0x02	; 2
     34a:	31 05       	cpc	r19, r1
     34c:	89 f1       	breq	.+98     	; 0x3b0 <disable_Timer+0x92>
     34e:	8b 81       	ldd	r24, Y+3	; 0x03
     350:	9c 81       	ldd	r25, Y+4	; 0x04
     352:	00 97       	sbiw	r24, 0x00	; 0
     354:	09 f0       	breq	.+2      	; 0x358 <disable_Timer+0x3a>
     356:	42 c0       	rjmp	.+132    	; 0x3dc <disable_Timer+0xbe>
	{
/****************** To disable timer 0, clear the clock source *************/
	case Timer0:
				CLEAR_BIT(CONTROL_REG_TIMER0,TIMER0_CLOCK_SELECT_BIT0);
     358:	a3 e5       	ldi	r26, 0x53	; 83
     35a:	b0 e0       	ldi	r27, 0x00	; 0
     35c:	e3 e5       	ldi	r30, 0x53	; 83
     35e:	f0 e0       	ldi	r31, 0x00	; 0
     360:	80 81       	ld	r24, Z
     362:	8e 7f       	andi	r24, 0xFE	; 254
     364:	8c 93       	st	X, r24
				CLEAR_BIT(CONTROL_REG_TIMER0,TIMER0_CLOCK_SELECT_BIT1);
     366:	a3 e5       	ldi	r26, 0x53	; 83
     368:	b0 e0       	ldi	r27, 0x00	; 0
     36a:	e3 e5       	ldi	r30, 0x53	; 83
     36c:	f0 e0       	ldi	r31, 0x00	; 0
     36e:	80 81       	ld	r24, Z
     370:	8d 7f       	andi	r24, 0xFD	; 253
     372:	8c 93       	st	X, r24
				CLEAR_BIT(CONTROL_REG_TIMER0,TIMER0_CLOCK_SELECT_BIT2);
     374:	a3 e5       	ldi	r26, 0x53	; 83
     376:	b0 e0       	ldi	r27, 0x00	; 0
     378:	e3 e5       	ldi	r30, 0x53	; 83
     37a:	f0 e0       	ldi	r31, 0x00	; 0
     37c:	80 81       	ld	r24, Z
     37e:	8b 7f       	andi	r24, 0xFB	; 251
     380:	8c 93       	st	X, r24
     382:	2d c0       	rjmp	.+90     	; 0x3de <disable_Timer+0xc0>
	break;
/****************** To disable timer 1, clear the clock source *************/
	case Timer1:
				CLEAR_BIT(CONTROL_REG_TIMER1B,TIMER1_CLOCK_SELECT_BIT0);
     384:	ae e4       	ldi	r26, 0x4E	; 78
     386:	b0 e0       	ldi	r27, 0x00	; 0
     388:	ee e4       	ldi	r30, 0x4E	; 78
     38a:	f0 e0       	ldi	r31, 0x00	; 0
     38c:	80 81       	ld	r24, Z
     38e:	8e 7f       	andi	r24, 0xFE	; 254
     390:	8c 93       	st	X, r24
				CLEAR_BIT(CONTROL_REG_TIMER1B,TIMER1_CLOCK_SELECT_BIT1);
     392:	ae e4       	ldi	r26, 0x4E	; 78
     394:	b0 e0       	ldi	r27, 0x00	; 0
     396:	ee e4       	ldi	r30, 0x4E	; 78
     398:	f0 e0       	ldi	r31, 0x00	; 0
     39a:	80 81       	ld	r24, Z
     39c:	8d 7f       	andi	r24, 0xFD	; 253
     39e:	8c 93       	st	X, r24
				CLEAR_BIT(CONTROL_REG_TIMER1B,TIMER1_CLOCK_SELECT_BIT2);
     3a0:	ae e4       	ldi	r26, 0x4E	; 78
     3a2:	b0 e0       	ldi	r27, 0x00	; 0
     3a4:	ee e4       	ldi	r30, 0x4E	; 78
     3a6:	f0 e0       	ldi	r31, 0x00	; 0
     3a8:	80 81       	ld	r24, Z
     3aa:	8b 7f       	andi	r24, 0xFB	; 251
     3ac:	8c 93       	st	X, r24
     3ae:	17 c0       	rjmp	.+46     	; 0x3de <disable_Timer+0xc0>
	break;
/****************** To disable timer 2, clear the clock source *************/
	case Timer2:
				CLEAR_BIT(CONTROL_REG_TIMER2,TIMER2_CLOCK_SELECT_BIT0);
     3b0:	a5 e4       	ldi	r26, 0x45	; 69
     3b2:	b0 e0       	ldi	r27, 0x00	; 0
     3b4:	e5 e4       	ldi	r30, 0x45	; 69
     3b6:	f0 e0       	ldi	r31, 0x00	; 0
     3b8:	80 81       	ld	r24, Z
     3ba:	8e 7f       	andi	r24, 0xFE	; 254
     3bc:	8c 93       	st	X, r24
				CLEAR_BIT(CONTROL_REG_TIMER2,TIMER2_CLOCK_SELECT_BIT1);
     3be:	a5 e4       	ldi	r26, 0x45	; 69
     3c0:	b0 e0       	ldi	r27, 0x00	; 0
     3c2:	e5 e4       	ldi	r30, 0x45	; 69
     3c4:	f0 e0       	ldi	r31, 0x00	; 0
     3c6:	80 81       	ld	r24, Z
     3c8:	8d 7f       	andi	r24, 0xFD	; 253
     3ca:	8c 93       	st	X, r24
				CLEAR_BIT(CONTROL_REG_TIMER2,TIMER2_CLOCK_SELECT_BIT2);
     3cc:	a5 e4       	ldi	r26, 0x45	; 69
     3ce:	b0 e0       	ldi	r27, 0x00	; 0
     3d0:	e5 e4       	ldi	r30, 0x45	; 69
     3d2:	f0 e0       	ldi	r31, 0x00	; 0
     3d4:	80 81       	ld	r24, Z
     3d6:	8b 7f       	andi	r24, 0xFB	; 251
     3d8:	8c 93       	st	X, r24
     3da:	01 c0       	rjmp	.+2      	; 0x3de <disable_Timer+0xc0>
	break;
/************* For error state *********************/
	default:ERROR_STATE = NOTOK;
     3dc:	19 82       	std	Y+1, r1	; 0x01

	}

	return ERROR_STATE;
     3de:	89 81       	ldd	r24, Y+1	; 0x01
}
     3e0:	0f 90       	pop	r0
     3e2:	0f 90       	pop	r0
     3e4:	0f 90       	pop	r0
     3e6:	0f 90       	pop	r0
     3e8:	cf 91       	pop	r28
     3ea:	df 91       	pop	r29
     3ec:	08 95       	ret

000003ee <DUTY_cycleForTimers>:

/********* Set duty for timers ************************/
uint8 DUTY_cycleForTimers(uint8 timer,uint16 duty,uint16 pre_load)
{
     3ee:	df 93       	push	r29
     3f0:	cf 93       	push	r28
     3f2:	00 d0       	rcall	.+0      	; 0x3f4 <DUTY_cycleForTimers+0x6>
     3f4:	00 d0       	rcall	.+0      	; 0x3f6 <DUTY_cycleForTimers+0x8>
     3f6:	00 d0       	rcall	.+0      	; 0x3f8 <DUTY_cycleForTimers+0xa>
     3f8:	cd b7       	in	r28, 0x3d	; 61
     3fa:	de b7       	in	r29, 0x3e	; 62
     3fc:	8a 83       	std	Y+2, r24	; 0x02
     3fe:	7c 83       	std	Y+4, r23	; 0x04
     400:	6b 83       	std	Y+3, r22	; 0x03
     402:	5e 83       	std	Y+6, r21	; 0x06
     404:	4d 83       	std	Y+5, r20	; 0x05
	uint8 Error_state = NOTOK;
     406:	19 82       	std	Y+1, r1	; 0x01

	if(timer >= Timer0 && timer <= Timer1)
     408:	8a 81       	ldd	r24, Y+2	; 0x02
     40a:	82 30       	cpi	r24, 0x02	; 2
     40c:	58 f4       	brcc	.+22     	; 0x424 <DUTY_cycleForTimers+0x36>
	{
		switch(timer)
     40e:	8a 81       	ldd	r24, Y+2	; 0x02
     410:	88 2f       	mov	r24, r24
     412:	90 e0       	ldi	r25, 0x00	; 0
     414:	00 97       	sbiw	r24, 0x00	; 0
     416:	21 f4       	brne	.+8      	; 0x420 <DUTY_cycleForTimers+0x32>
#if SELECTION_MODULE0				==			 TIMER0_ENABLE
#if TIMER0_SELECTION_MODE			!=           NORMAL_MODE
			OUTPUT_COMPARE_REG_TIMER0 = duty;
#endif
#if TIMER0_SELECTION_MODE			!=           FAST_PWM_MODE
		DATA_REG_TIMER0 = pre_load;
     418:	e2 e5       	ldi	r30, 0x52	; 82
     41a:	f0 e0       	ldi	r31, 0x00	; 0
     41c:	8d 81       	ldd	r24, Y+5	; 0x05
     41e:	80 83       	st	Z, r24
		DATA_REG_TIMER2 = pre_load;
#endif
#endif
		break;
		}
		Error_state = OK;
     420:	81 e0       	ldi	r24, 0x01	; 1
     422:	89 83       	std	Y+1, r24	; 0x01
	}
	return Error_state;
     424:	89 81       	ldd	r24, Y+1	; 0x01
}
     426:	26 96       	adiw	r28, 0x06	; 6
     428:	0f b6       	in	r0, 0x3f	; 63
     42a:	f8 94       	cli
     42c:	de bf       	out	0x3e, r29	; 62
     42e:	0f be       	out	0x3f, r0	; 63
     430:	cd bf       	out	0x3d, r28	; 61
     432:	cf 91       	pop	r28
     434:	df 91       	pop	r29
     436:	08 95       	ret

00000438 <TIMERS_setCallBackFunction>:
#if ((SELECTION_MODULE0  == TIMER0_ENABLE) && (TIMER0_SELECTION_MODE != FAST_PWM_MODE)) || ((SELECTION_MODULE1  == TIMER1_ENABLE) && (TIMER1_SELECTION_MODE != FAST_PWM_MODE)) ||((SELECTION_MODULE2  == TIMER2_ENABLE) && (TIMER2_SELECTION_MODE != FAST_PWM_MODE))
#if ((TIMER0_INTERRUPT_TECHNIQE == ENABLE) || (TIMER1_INTERRUPT_TECHNIQE == ENABLE) || (TIMER2_INTERRUPT_TECHNIQE == ENABLE))
/*** Implementation of SETCALLBACK function *******************/
uint8 TIMERS_setCallBackFunction(uint8 timer,uint8 mode,uint8 NumerOfTickTimes,void (* PointerToFunction)(void))
{
     438:	df 93       	push	r29
     43a:	cf 93       	push	r28
     43c:	00 d0       	rcall	.+0      	; 0x43e <TIMERS_setCallBackFunction+0x6>
     43e:	00 d0       	rcall	.+0      	; 0x440 <TIMERS_setCallBackFunction+0x8>
     440:	00 d0       	rcall	.+0      	; 0x442 <TIMERS_setCallBackFunction+0xa>
     442:	cd b7       	in	r28, 0x3d	; 61
     444:	de b7       	in	r29, 0x3e	; 62
     446:	8a 83       	std	Y+2, r24	; 0x02
     448:	6b 83       	std	Y+3, r22	; 0x03
     44a:	4c 83       	std	Y+4, r20	; 0x04
     44c:	3e 83       	std	Y+6, r19	; 0x06
     44e:	2d 83       	std	Y+5, r18	; 0x05
/****************** For error state checking ******************************/
	uint8 ErrorStateVariable = NOTOK;
     450:	19 82       	std	Y+1, r1	; 0x01
	if((timer >= Timer0 && timer <= Timer2) && (timer >= TIMER_OVERFLOW_MODE && timer <= TIMER1_ICU) && (PointerToFunction != NULL_PTR))
     452:	8a 81       	ldd	r24, Y+2	; 0x02
     454:	83 30       	cpi	r24, 0x03	; 3
     456:	88 f5       	brcc	.+98     	; 0x4ba <TIMERS_setCallBackFunction+0x82>
     458:	8a 81       	ldd	r24, Y+2	; 0x02
     45a:	84 30       	cpi	r24, 0x04	; 4
     45c:	70 f5       	brcc	.+92     	; 0x4ba <TIMERS_setCallBackFunction+0x82>
     45e:	8d 81       	ldd	r24, Y+5	; 0x05
     460:	9e 81       	ldd	r25, Y+6	; 0x06
     462:	00 97       	sbiw	r24, 0x00	; 0
     464:	51 f1       	breq	.+84     	; 0x4ba <TIMERS_setCallBackFunction+0x82>
	{
/******* Assign array of pointers to functions with address of input function according input timer and mode ***/
		TimersModes[timer][mode] = PointerToFunction;
     466:	8a 81       	ldd	r24, Y+2	; 0x02
     468:	28 2f       	mov	r18, r24
     46a:	30 e0       	ldi	r19, 0x00	; 0
     46c:	8b 81       	ldd	r24, Y+3	; 0x03
     46e:	48 2f       	mov	r20, r24
     470:	50 e0       	ldi	r21, 0x00	; 0
     472:	c9 01       	movw	r24, r18
     474:	88 0f       	add	r24, r24
     476:	99 1f       	adc	r25, r25
     478:	82 0f       	add	r24, r18
     47a:	93 1f       	adc	r25, r19
     47c:	84 0f       	add	r24, r20
     47e:	95 1f       	adc	r25, r21
     480:	88 0f       	add	r24, r24
     482:	99 1f       	adc	r25, r25
     484:	fc 01       	movw	r30, r24
     486:	e0 58       	subi	r30, 0x80	; 128
     488:	ff 4f       	sbci	r31, 0xFF	; 255
     48a:	8d 81       	ldd	r24, Y+5	; 0x05
     48c:	9e 81       	ldd	r25, Y+6	; 0x06
     48e:	91 83       	std	Z+1, r25	; 0x01
     490:	80 83       	st	Z, r24
/******* Set value of number of times of interrupt *************************************************************/
		ArrayOfTickTimesInterrupt[timer][mode] = NumerOfTickTimes;
     492:	8a 81       	ldd	r24, Y+2	; 0x02
     494:	28 2f       	mov	r18, r24
     496:	30 e0       	ldi	r19, 0x00	; 0
     498:	8b 81       	ldd	r24, Y+3	; 0x03
     49a:	48 2f       	mov	r20, r24
     49c:	50 e0       	ldi	r21, 0x00	; 0
     49e:	c9 01       	movw	r24, r18
     4a0:	88 0f       	add	r24, r24
     4a2:	99 1f       	adc	r25, r25
     4a4:	82 0f       	add	r24, r18
     4a6:	93 1f       	adc	r25, r19
     4a8:	84 0f       	add	r24, r20
     4aa:	95 1f       	adc	r25, r21
     4ac:	fc 01       	movw	r30, r24
     4ae:	ec 58       	subi	r30, 0x8C	; 140
     4b0:	ff 4f       	sbci	r31, 0xFF	; 255
     4b2:	8c 81       	ldd	r24, Y+4	; 0x04
     4b4:	80 83       	st	Z, r24
/******* Set the error state variable with okay *************************************/
		ErrorStateVariable = OK;
     4b6:	81 e0       	ldi	r24, 0x01	; 1
     4b8:	89 83       	std	Y+1, r24	; 0x01
	}
	return ErrorStateVariable;
     4ba:	89 81       	ldd	r24, Y+1	; 0x01
}
     4bc:	26 96       	adiw	r28, 0x06	; 6
     4be:	0f b6       	in	r0, 0x3f	; 63
     4c0:	f8 94       	cli
     4c2:	de bf       	out	0x3e, r29	; 62
     4c4:	0f be       	out	0x3f, r0	; 63
     4c6:	cd bf       	out	0x3d, r28	; 61
     4c8:	cf 91       	pop	r28
     4ca:	df 91       	pop	r29
     4cc:	08 95       	ret

000004ce <__vector_11>:
/*** ISR for each  mode in timer 0 ********/
#if TIMER0_SELECTION_MODE		==		NORMAL_MODE

void __vector_11(void)         __attribute__((signal));
void __vector_11(void)
{
     4ce:	1f 92       	push	r1
     4d0:	0f 92       	push	r0
     4d2:	0f b6       	in	r0, 0x3f	; 63
     4d4:	0f 92       	push	r0
     4d6:	11 24       	eor	r1, r1
     4d8:	2f 93       	push	r18
     4da:	3f 93       	push	r19
     4dc:	4f 93       	push	r20
     4de:	5f 93       	push	r21
     4e0:	6f 93       	push	r22
     4e2:	7f 93       	push	r23
     4e4:	8f 93       	push	r24
     4e6:	9f 93       	push	r25
     4e8:	af 93       	push	r26
     4ea:	bf 93       	push	r27
     4ec:	ef 93       	push	r30
     4ee:	ff 93       	push	r31
     4f0:	df 93       	push	r29
     4f2:	cf 93       	push	r28
     4f4:	cd b7       	in	r28, 0x3d	; 61
     4f6:	de b7       	in	r29, 0x3e	; 62
	Counter[Timer0] ++;
     4f8:	80 91 7d 00 	lds	r24, 0x007D
     4fc:	8f 5f       	subi	r24, 0xFF	; 255
     4fe:	80 93 7d 00 	sts	0x007D, r24
	if(ArrayOfTickTimesInterrupt[Timer0][TIMER_OVERFLOW_MODE])
     502:	80 91 74 00 	lds	r24, 0x0074
     506:	88 23       	and	r24, r24
     508:	99 f0       	breq	.+38     	; 0x530 <__vector_11+0x62>
	{
		/*********** Check the number of interrupts to execute the required function *******************************/
			if(Counter[Timer0] == ArrayOfTickTimesInterrupt[Timer0][TIMER_OVERFLOW_MODE])
     50a:	90 91 7d 00 	lds	r25, 0x007D
     50e:	80 91 74 00 	lds	r24, 0x0074
     512:	98 17       	cp	r25, r24
     514:	69 f4       	brne	.+26     	; 0x530 <__vector_11+0x62>
			{
				if((* TimersModes[Timer0][TIMER_OVERFLOW_MODE]) != NULL_PTR)
     516:	80 91 80 00 	lds	r24, 0x0080
     51a:	90 91 81 00 	lds	r25, 0x0081
     51e:	00 97       	sbiw	r24, 0x00	; 0
     520:	39 f0       	breq	.+14     	; 0x530 <__vector_11+0x62>
				{
					(* TimersModes[Timer0][TIMER_OVERFLOW_MODE])();
     522:	e0 91 80 00 	lds	r30, 0x0080
     526:	f0 91 81 00 	lds	r31, 0x0081
     52a:	09 95       	icall
					Counter[Timer0] = 0;
     52c:	10 92 7d 00 	sts	0x007D, r1
				}
			}
	}


}
     530:	cf 91       	pop	r28
     532:	df 91       	pop	r29
     534:	ff 91       	pop	r31
     536:	ef 91       	pop	r30
     538:	bf 91       	pop	r27
     53a:	af 91       	pop	r26
     53c:	9f 91       	pop	r25
     53e:	8f 91       	pop	r24
     540:	7f 91       	pop	r23
     542:	6f 91       	pop	r22
     544:	5f 91       	pop	r21
     546:	4f 91       	pop	r20
     548:	3f 91       	pop	r19
     54a:	2f 91       	pop	r18
     54c:	0f 90       	pop	r0
     54e:	0f be       	out	0x3f, r0	; 63
     550:	0f 90       	pop	r0
     552:	1f 90       	pop	r1
     554:	18 95       	reti

00000556 <ENABLE_externalInterrupt>:
/*******************Calling the module, that contain of common macros********/
#include"../../UTILS/common_macro.h"

/***** function that anable and handling the setting to the external interrupt sources: ********/
uint8 ENABLE_externalInterrupt(uint8 select_INT, uint8 select_EDGE)
{
     556:	df 93       	push	r29
     558:	cf 93       	push	r28
     55a:	cd b7       	in	r28, 0x3d	; 61
     55c:	de b7       	in	r29, 0x3e	; 62
     55e:	29 97       	sbiw	r28, 0x09	; 9
     560:	0f b6       	in	r0, 0x3f	; 63
     562:	f8 94       	cli
     564:	de bf       	out	0x3e, r29	; 62
     566:	0f be       	out	0x3f, r0	; 63
     568:	cd bf       	out	0x3d, r28	; 61
     56a:	8a 83       	std	Y+2, r24	; 0x02
     56c:	6b 83       	std	Y+3, r22	; 0x03
/*************** This variable for checking error*****************/
	uint8 ERROR_STATE = OK;
     56e:	81 e0       	ldi	r24, 0x01	; 1
     570:	89 83       	std	Y+1, r24	; 0x01
	if((select_INT <= EXTINT2))
     572:	8a 81       	ldd	r24, Y+2	; 0x02
     574:	83 30       	cpi	r24, 0x03	; 3
     576:	08 f0       	brcs	.+2      	; 0x57a <ENABLE_externalInterrupt+0x24>
     578:	04 c1       	rjmp	.+520    	; 0x782 <ENABLE_externalInterrupt+0x22c>
/************************ FOR EXT0  **********************************/
/*********************************************************************/

		#if                EXT0_SELECTION              ==                ENABLE

			if(select_INT == EXTINT0)
     57a:	8a 81       	ldd	r24, Y+2	; 0x02
     57c:	88 23       	and	r24, r24
     57e:	09 f0       	breq	.+2      	; 0x582 <ENABLE_externalInterrupt+0x2c>
     580:	67 c0       	rjmp	.+206    	; 0x650 <ENABLE_externalInterrupt+0xfa>
			{
/************************ Set the pin direction *****************************/
			GPIO_setupPinDirection(EXT0_PORT_ID,EXT0_PIN,PIN_INPUT);
     582:	83 e0       	ldi	r24, 0x03	; 3
     584:	62 e0       	ldi	r22, 0x02	; 2
     586:	40 e0       	ldi	r20, 0x00	; 0
     588:	0e 94 cd 04 	call	0x99a	; 0x99a <GPIO_setupPinDirection>

/************************* Active the pull_up resistor: *******************/
			GPIO_writePin(EXT0_PORT_ID,EXT0_PIN,LOGIC_HIGH);
		#endif
/************************* Enable the EX_INT0: *******************/
		SET_BIT(INTERRUPT_ENABLE_REGISTER_EXT0,ENABLE_EXT0_BIT);
     58c:	ab e5       	ldi	r26, 0x5B	; 91
     58e:	b0 e0       	ldi	r27, 0x00	; 0
     590:	eb e5       	ldi	r30, 0x5B	; 91
     592:	f0 e0       	ldi	r31, 0x00	; 0
     594:	80 81       	ld	r24, Z
     596:	80 64       	ori	r24, 0x40	; 64
     598:	8c 93       	st	X, r24
/************************* Selection edge : *******************/

			switch(select_EDGE)
     59a:	8b 81       	ldd	r24, Y+3	; 0x03
     59c:	28 2f       	mov	r18, r24
     59e:	30 e0       	ldi	r19, 0x00	; 0
     5a0:	39 87       	std	Y+9, r19	; 0x09
     5a2:	28 87       	std	Y+8, r18	; 0x08
     5a4:	88 85       	ldd	r24, Y+8	; 0x08
     5a6:	99 85       	ldd	r25, Y+9	; 0x09
     5a8:	81 30       	cpi	r24, 0x01	; 1
     5aa:	91 05       	cpc	r25, r1
     5ac:	09 f4       	brne	.+2      	; 0x5b0 <ENABLE_externalInterrupt+0x5a>
     5ae:	42 c0       	rjmp	.+132    	; 0x634 <ENABLE_externalInterrupt+0xde>
     5b0:	28 85       	ldd	r18, Y+8	; 0x08
     5b2:	39 85       	ldd	r19, Y+9	; 0x09
     5b4:	22 30       	cpi	r18, 0x02	; 2
     5b6:	31 05       	cpc	r19, r1
     5b8:	2c f4       	brge	.+10     	; 0x5c4 <ENABLE_externalInterrupt+0x6e>
     5ba:	88 85       	ldd	r24, Y+8	; 0x08
     5bc:	99 85       	ldd	r25, Y+9	; 0x09
     5be:	00 97       	sbiw	r24, 0x00	; 0
     5c0:	51 f1       	breq	.+84     	; 0x616 <ENABLE_externalInterrupt+0xc0>
     5c2:	46 c0       	rjmp	.+140    	; 0x650 <ENABLE_externalInterrupt+0xfa>
     5c4:	28 85       	ldd	r18, Y+8	; 0x08
     5c6:	39 85       	ldd	r19, Y+9	; 0x09
     5c8:	22 30       	cpi	r18, 0x02	; 2
     5ca:	31 05       	cpc	r19, r1
     5cc:	31 f0       	breq	.+12     	; 0x5da <ENABLE_externalInterrupt+0x84>
     5ce:	88 85       	ldd	r24, Y+8	; 0x08
     5d0:	99 85       	ldd	r25, Y+9	; 0x09
     5d2:	83 30       	cpi	r24, 0x03	; 3
     5d4:	91 05       	cpc	r25, r1
     5d6:	81 f0       	breq	.+32     	; 0x5f8 <ENABLE_externalInterrupt+0xa2>
     5d8:	3b c0       	rjmp	.+118    	; 0x650 <ENABLE_externalInterrupt+0xfa>
			{
			case LOW_LEVEL_EDGE:
				CLEAR_BIT(INTERRUPT_CONTER_REGISTER_EXT0,EXT0_BIT0);
     5da:	a5 e5       	ldi	r26, 0x55	; 85
     5dc:	b0 e0       	ldi	r27, 0x00	; 0
     5de:	e5 e5       	ldi	r30, 0x55	; 85
     5e0:	f0 e0       	ldi	r31, 0x00	; 0
     5e2:	80 81       	ld	r24, Z
     5e4:	8e 7f       	andi	r24, 0xFE	; 254
     5e6:	8c 93       	st	X, r24
				CLEAR_BIT(INTERRUPT_CONTER_REGISTER_EXT0,EXT0_BIT1);
     5e8:	a5 e5       	ldi	r26, 0x55	; 85
     5ea:	b0 e0       	ldi	r27, 0x00	; 0
     5ec:	e5 e5       	ldi	r30, 0x55	; 85
     5ee:	f0 e0       	ldi	r31, 0x00	; 0
     5f0:	80 81       	ld	r24, Z
     5f2:	8d 7f       	andi	r24, 0xFD	; 253
     5f4:	8c 93       	st	X, r24
     5f6:	2c c0       	rjmp	.+88     	; 0x650 <ENABLE_externalInterrupt+0xfa>
				break;
			case ANY_LOGIC_CHANGE:
				SET_BIT(INTERRUPT_CONTER_REGISTER_EXT0,EXT0_BIT0);
     5f8:	a5 e5       	ldi	r26, 0x55	; 85
     5fa:	b0 e0       	ldi	r27, 0x00	; 0
     5fc:	e5 e5       	ldi	r30, 0x55	; 85
     5fe:	f0 e0       	ldi	r31, 0x00	; 0
     600:	80 81       	ld	r24, Z
     602:	81 60       	ori	r24, 0x01	; 1
     604:	8c 93       	st	X, r24
				CLEAR_BIT(INTERRUPT_CONTER_REGISTER_EXT0,EXT0_BIT1);
     606:	a5 e5       	ldi	r26, 0x55	; 85
     608:	b0 e0       	ldi	r27, 0x00	; 0
     60a:	e5 e5       	ldi	r30, 0x55	; 85
     60c:	f0 e0       	ldi	r31, 0x00	; 0
     60e:	80 81       	ld	r24, Z
     610:	8d 7f       	andi	r24, 0xFD	; 253
     612:	8c 93       	st	X, r24
     614:	1d c0       	rjmp	.+58     	; 0x650 <ENABLE_externalInterrupt+0xfa>
				break;
			case FALLING_EDGE:
				CLEAR_BIT(INTERRUPT_CONTER_REGISTER_EXT0,EXT0_BIT0);
     616:	a5 e5       	ldi	r26, 0x55	; 85
     618:	b0 e0       	ldi	r27, 0x00	; 0
     61a:	e5 e5       	ldi	r30, 0x55	; 85
     61c:	f0 e0       	ldi	r31, 0x00	; 0
     61e:	80 81       	ld	r24, Z
     620:	8e 7f       	andi	r24, 0xFE	; 254
     622:	8c 93       	st	X, r24
				SET_BIT(INTERRUPT_CONTER_REGISTER_EXT0,EXT0_BIT1);
     624:	a5 e5       	ldi	r26, 0x55	; 85
     626:	b0 e0       	ldi	r27, 0x00	; 0
     628:	e5 e5       	ldi	r30, 0x55	; 85
     62a:	f0 e0       	ldi	r31, 0x00	; 0
     62c:	80 81       	ld	r24, Z
     62e:	82 60       	ori	r24, 0x02	; 2
     630:	8c 93       	st	X, r24
     632:	0e c0       	rjmp	.+28     	; 0x650 <ENABLE_externalInterrupt+0xfa>
				break;
			case RISING_EDGE:
				SET_BIT(INTERRUPT_CONTER_REGISTER_EXT0,EXT0_BIT0);
     634:	a5 e5       	ldi	r26, 0x55	; 85
     636:	b0 e0       	ldi	r27, 0x00	; 0
     638:	e5 e5       	ldi	r30, 0x55	; 85
     63a:	f0 e0       	ldi	r31, 0x00	; 0
     63c:	80 81       	ld	r24, Z
     63e:	81 60       	ori	r24, 0x01	; 1
     640:	8c 93       	st	X, r24
				SET_BIT(INTERRUPT_CONTER_REGISTER_EXT0,EXT0_BIT1);
     642:	a5 e5       	ldi	r26, 0x55	; 85
     644:	b0 e0       	ldi	r27, 0x00	; 0
     646:	e5 e5       	ldi	r30, 0x55	; 85
     648:	f0 e0       	ldi	r31, 0x00	; 0
     64a:	80 81       	ld	r24, Z
     64c:	82 60       	ori	r24, 0x02	; 2
     64e:	8c 93       	st	X, r24
/************************ FOR EXT1  **********************************/
/*********************************************************************/

		#if                EXT1_SELECTION              ==                ENABLE

			if(select_INT == EXTINT1)
     650:	8a 81       	ldd	r24, Y+2	; 0x02
     652:	81 30       	cpi	r24, 0x01	; 1
     654:	09 f0       	breq	.+2      	; 0x658 <ENABLE_externalInterrupt+0x102>
     656:	67 c0       	rjmp	.+206    	; 0x726 <ENABLE_externalInterrupt+0x1d0>
			{
/************************ Set the pin direction *****************************/
			GPIO_setupPinDirection(EXT1_PORT_ID,EXT1_PIN,PIN_INPUT);
     658:	83 e0       	ldi	r24, 0x03	; 3
     65a:	63 e0       	ldi	r22, 0x03	; 3
     65c:	40 e0       	ldi	r20, 0x00	; 0
     65e:	0e 94 cd 04 	call	0x99a	; 0x99a <GPIO_setupPinDirection>

/************************* Active the pull_up resistor: *******************/
			GPIO_writePin(EXT1_PORT_ID,EXT1_PIN,LOGIC_HIGH);
		#endif
/************************* Enable the EX_INT1: *******************/
		SET_BIT(INTERRUPT_ENABLE_REGISTER_EXT1,ENABLE_EXT1_BIT);
     662:	ab e5       	ldi	r26, 0x5B	; 91
     664:	b0 e0       	ldi	r27, 0x00	; 0
     666:	eb e5       	ldi	r30, 0x5B	; 91
     668:	f0 e0       	ldi	r31, 0x00	; 0
     66a:	80 81       	ld	r24, Z
     66c:	80 68       	ori	r24, 0x80	; 128
     66e:	8c 93       	st	X, r24
/************************* Selection edge : *******************/

		switch(select_EDGE)
     670:	8b 81       	ldd	r24, Y+3	; 0x03
     672:	28 2f       	mov	r18, r24
     674:	30 e0       	ldi	r19, 0x00	; 0
     676:	3f 83       	std	Y+7, r19	; 0x07
     678:	2e 83       	std	Y+6, r18	; 0x06
     67a:	8e 81       	ldd	r24, Y+6	; 0x06
     67c:	9f 81       	ldd	r25, Y+7	; 0x07
     67e:	81 30       	cpi	r24, 0x01	; 1
     680:	91 05       	cpc	r25, r1
     682:	09 f4       	brne	.+2      	; 0x686 <ENABLE_externalInterrupt+0x130>
     684:	42 c0       	rjmp	.+132    	; 0x70a <ENABLE_externalInterrupt+0x1b4>
     686:	2e 81       	ldd	r18, Y+6	; 0x06
     688:	3f 81       	ldd	r19, Y+7	; 0x07
     68a:	22 30       	cpi	r18, 0x02	; 2
     68c:	31 05       	cpc	r19, r1
     68e:	2c f4       	brge	.+10     	; 0x69a <ENABLE_externalInterrupt+0x144>
     690:	8e 81       	ldd	r24, Y+6	; 0x06
     692:	9f 81       	ldd	r25, Y+7	; 0x07
     694:	00 97       	sbiw	r24, 0x00	; 0
     696:	51 f1       	breq	.+84     	; 0x6ec <ENABLE_externalInterrupt+0x196>
     698:	46 c0       	rjmp	.+140    	; 0x726 <ENABLE_externalInterrupt+0x1d0>
     69a:	2e 81       	ldd	r18, Y+6	; 0x06
     69c:	3f 81       	ldd	r19, Y+7	; 0x07
     69e:	22 30       	cpi	r18, 0x02	; 2
     6a0:	31 05       	cpc	r19, r1
     6a2:	31 f0       	breq	.+12     	; 0x6b0 <ENABLE_externalInterrupt+0x15a>
     6a4:	8e 81       	ldd	r24, Y+6	; 0x06
     6a6:	9f 81       	ldd	r25, Y+7	; 0x07
     6a8:	83 30       	cpi	r24, 0x03	; 3
     6aa:	91 05       	cpc	r25, r1
     6ac:	81 f0       	breq	.+32     	; 0x6ce <ENABLE_externalInterrupt+0x178>
     6ae:	3b c0       	rjmp	.+118    	; 0x726 <ENABLE_externalInterrupt+0x1d0>
		{
		case LOW_LEVEL_EDGE:
			CLEAR_BIT(INTERRUPT_CONTER_REGISTER_EXT1,EXT1_BIT0);
     6b0:	a5 e5       	ldi	r26, 0x55	; 85
     6b2:	b0 e0       	ldi	r27, 0x00	; 0
     6b4:	e5 e5       	ldi	r30, 0x55	; 85
     6b6:	f0 e0       	ldi	r31, 0x00	; 0
     6b8:	80 81       	ld	r24, Z
     6ba:	8b 7f       	andi	r24, 0xFB	; 251
     6bc:	8c 93       	st	X, r24
			CLEAR_BIT(INTERRUPT_CONTER_REGISTER_EXT1,EXT1_BIT1);
     6be:	a5 e5       	ldi	r26, 0x55	; 85
     6c0:	b0 e0       	ldi	r27, 0x00	; 0
     6c2:	e5 e5       	ldi	r30, 0x55	; 85
     6c4:	f0 e0       	ldi	r31, 0x00	; 0
     6c6:	80 81       	ld	r24, Z
     6c8:	87 7f       	andi	r24, 0xF7	; 247
     6ca:	8c 93       	st	X, r24
     6cc:	2c c0       	rjmp	.+88     	; 0x726 <ENABLE_externalInterrupt+0x1d0>
			break;
		case ANY_LOGIC_CHANGE:
			SET_BIT(INTERRUPT_CONTER_REGISTER_EXT1,EXT1_BIT0);
     6ce:	a5 e5       	ldi	r26, 0x55	; 85
     6d0:	b0 e0       	ldi	r27, 0x00	; 0
     6d2:	e5 e5       	ldi	r30, 0x55	; 85
     6d4:	f0 e0       	ldi	r31, 0x00	; 0
     6d6:	80 81       	ld	r24, Z
     6d8:	84 60       	ori	r24, 0x04	; 4
     6da:	8c 93       	st	X, r24
			CLEAR_BIT(INTERRUPT_CONTER_REGISTER_EXT1,EXT1_BIT1);
     6dc:	a5 e5       	ldi	r26, 0x55	; 85
     6de:	b0 e0       	ldi	r27, 0x00	; 0
     6e0:	e5 e5       	ldi	r30, 0x55	; 85
     6e2:	f0 e0       	ldi	r31, 0x00	; 0
     6e4:	80 81       	ld	r24, Z
     6e6:	87 7f       	andi	r24, 0xF7	; 247
     6e8:	8c 93       	st	X, r24
     6ea:	1d c0       	rjmp	.+58     	; 0x726 <ENABLE_externalInterrupt+0x1d0>
			break;
		case FALLING_EDGE:
			CLEAR_BIT(INTERRUPT_CONTER_REGISTER_EXT1,EXT1_BIT0);
     6ec:	a5 e5       	ldi	r26, 0x55	; 85
     6ee:	b0 e0       	ldi	r27, 0x00	; 0
     6f0:	e5 e5       	ldi	r30, 0x55	; 85
     6f2:	f0 e0       	ldi	r31, 0x00	; 0
     6f4:	80 81       	ld	r24, Z
     6f6:	8b 7f       	andi	r24, 0xFB	; 251
     6f8:	8c 93       	st	X, r24
			SET_BIT(INTERRUPT_CONTER_REGISTER_EXT1,EXT1_BIT1);
     6fa:	a5 e5       	ldi	r26, 0x55	; 85
     6fc:	b0 e0       	ldi	r27, 0x00	; 0
     6fe:	e5 e5       	ldi	r30, 0x55	; 85
     700:	f0 e0       	ldi	r31, 0x00	; 0
     702:	80 81       	ld	r24, Z
     704:	88 60       	ori	r24, 0x08	; 8
     706:	8c 93       	st	X, r24
     708:	0e c0       	rjmp	.+28     	; 0x726 <ENABLE_externalInterrupt+0x1d0>
			break;
		case RISING_EDGE:
			SET_BIT(INTERRUPT_CONTER_REGISTER_EXT1,EXT1_BIT0);
     70a:	a5 e5       	ldi	r26, 0x55	; 85
     70c:	b0 e0       	ldi	r27, 0x00	; 0
     70e:	e5 e5       	ldi	r30, 0x55	; 85
     710:	f0 e0       	ldi	r31, 0x00	; 0
     712:	80 81       	ld	r24, Z
     714:	84 60       	ori	r24, 0x04	; 4
     716:	8c 93       	st	X, r24
			SET_BIT(INTERRUPT_CONTER_REGISTER_EXT1,EXT1_BIT1);
     718:	a5 e5       	ldi	r26, 0x55	; 85
     71a:	b0 e0       	ldi	r27, 0x00	; 0
     71c:	e5 e5       	ldi	r30, 0x55	; 85
     71e:	f0 e0       	ldi	r31, 0x00	; 0
     720:	80 81       	ld	r24, Z
     722:	88 60       	ori	r24, 0x08	; 8
     724:	8c 93       	st	X, r24
/************************ FOR EXT2  **********************************/
/*********************************************************************/

		#if                EXT2_SELECTION              ==                ENABLE

			if(select_INT == EXTINT2)
     726:	8a 81       	ldd	r24, Y+2	; 0x02
     728:	82 30       	cpi	r24, 0x02	; 2
     72a:	61 f5       	brne	.+88     	; 0x784 <ENABLE_externalInterrupt+0x22e>
			{
/************************ Set the pin direction *****************************/
			GPIO_setupPinDirection(EXT2_PORT_ID,EXT2_PIN,PIN_INPUT);
     72c:	81 e0       	ldi	r24, 0x01	; 1
     72e:	62 e0       	ldi	r22, 0x02	; 2
     730:	40 e0       	ldi	r20, 0x00	; 0
     732:	0e 94 cd 04 	call	0x99a	; 0x99a <GPIO_setupPinDirection>
/************************* Active the pull_up resistor: *******************/
			GPIO_writePin(EXT2_PORT_ID,EXT2_PIN,LOGIC_HIGH);
		#endif

/************************* Enable the EX_INT1: *******************/
		SET_BIT(INTERRUPT_ENABLE_REGISTER_EXT2,ENABLE_EXT2_BIT);
     736:	ab e5       	ldi	r26, 0x5B	; 91
     738:	b0 e0       	ldi	r27, 0x00	; 0
     73a:	eb e5       	ldi	r30, 0x5B	; 91
     73c:	f0 e0       	ldi	r31, 0x00	; 0
     73e:	80 81       	ld	r24, Z
     740:	80 62       	ori	r24, 0x20	; 32
     742:	8c 93       	st	X, r24

/************************* Selection edge : *******************/
			switch(select_EDGE)
     744:	8b 81       	ldd	r24, Y+3	; 0x03
     746:	28 2f       	mov	r18, r24
     748:	30 e0       	ldi	r19, 0x00	; 0
     74a:	3d 83       	std	Y+5, r19	; 0x05
     74c:	2c 83       	std	Y+4, r18	; 0x04
     74e:	8c 81       	ldd	r24, Y+4	; 0x04
     750:	9d 81       	ldd	r25, Y+5	; 0x05
     752:	00 97       	sbiw	r24, 0x00	; 0
     754:	31 f0       	breq	.+12     	; 0x762 <ENABLE_externalInterrupt+0x20c>
     756:	2c 81       	ldd	r18, Y+4	; 0x04
     758:	3d 81       	ldd	r19, Y+5	; 0x05
     75a:	21 30       	cpi	r18, 0x01	; 1
     75c:	31 05       	cpc	r19, r1
     75e:	49 f0       	breq	.+18     	; 0x772 <ENABLE_externalInterrupt+0x21c>
     760:	11 c0       	rjmp	.+34     	; 0x784 <ENABLE_externalInterrupt+0x22e>
			{

				case FALLING_EDGE:
					CLEAR_BIT(INTERRUPT_CONTER_REGISTER_EXT2,EXT2_BIT6);
     762:	a4 e5       	ldi	r26, 0x54	; 84
     764:	b0 e0       	ldi	r27, 0x00	; 0
     766:	e4 e5       	ldi	r30, 0x54	; 84
     768:	f0 e0       	ldi	r31, 0x00	; 0
     76a:	80 81       	ld	r24, Z
     76c:	8f 7b       	andi	r24, 0xBF	; 191
     76e:	8c 93       	st	X, r24
     770:	09 c0       	rjmp	.+18     	; 0x784 <ENABLE_externalInterrupt+0x22e>
				break;
				case RISING_EDGE:
					SET_BIT(INTERRUPT_CONTER_REGISTER_EXT2,EXT2_BIT6);
     772:	a4 e5       	ldi	r26, 0x54	; 84
     774:	b0 e0       	ldi	r27, 0x00	; 0
     776:	e4 e5       	ldi	r30, 0x54	; 84
     778:	f0 e0       	ldi	r31, 0x00	; 0
     77a:	80 81       	ld	r24, Z
     77c:	80 64       	ori	r24, 0x40	; 64
     77e:	8c 93       	st	X, r24
     780:	01 c0       	rjmp	.+2      	; 0x784 <ENABLE_externalInterrupt+0x22e>
			}
		#endif
	}
	else
	{
		ERROR_STATE = NOTOK;
     782:	19 82       	std	Y+1, r1	; 0x01
	}
	return ERROR_STATE;
     784:	89 81       	ldd	r24, Y+1	; 0x01

	
}
     786:	29 96       	adiw	r28, 0x09	; 9
     788:	0f b6       	in	r0, 0x3f	; 63
     78a:	f8 94       	cli
     78c:	de bf       	out	0x3e, r29	; 62
     78e:	0f be       	out	0x3f, r0	; 63
     790:	cd bf       	out	0x3d, r28	; 61
     792:	cf 91       	pop	r28
     794:	df 91       	pop	r29
     796:	08 95       	ret

00000798 <DISABLE_externalInterrupt>:
/***************************function that disable the external interrupt sources:******/

uint8 DISABLE_externalInterrupt(uint8 SELECTION_INT)
{
     798:	df 93       	push	r29
     79a:	cf 93       	push	r28
     79c:	00 d0       	rcall	.+0      	; 0x79e <DISABLE_externalInterrupt+0x6>
     79e:	00 d0       	rcall	.+0      	; 0x7a0 <DISABLE_externalInterrupt+0x8>
     7a0:	cd b7       	in	r28, 0x3d	; 61
     7a2:	de b7       	in	r29, 0x3e	; 62
     7a4:	8a 83       	std	Y+2, r24	; 0x02
	/*************** This variable for checking error*****************/
		uint8 ERROR_STATE = OK;
     7a6:	81 e0       	ldi	r24, 0x01	; 1
     7a8:	89 83       	std	Y+1, r24	; 0x01
		if((SELECTION_INT <= EXTINT2))
     7aa:	8a 81       	ldd	r24, Y+2	; 0x02
     7ac:	83 30       	cpi	r24, 0x03	; 3
     7ae:	58 f5       	brcc	.+86     	; 0x806 <DISABLE_externalInterrupt+0x6e>
		{
			switch(SELECTION_INT)
     7b0:	8a 81       	ldd	r24, Y+2	; 0x02
     7b2:	28 2f       	mov	r18, r24
     7b4:	30 e0       	ldi	r19, 0x00	; 0
     7b6:	3c 83       	std	Y+4, r19	; 0x04
     7b8:	2b 83       	std	Y+3, r18	; 0x03
     7ba:	8b 81       	ldd	r24, Y+3	; 0x03
     7bc:	9c 81       	ldd	r25, Y+4	; 0x04
     7be:	81 30       	cpi	r24, 0x01	; 1
     7c0:	91 05       	cpc	r25, r1
     7c2:	89 f0       	breq	.+34     	; 0x7e6 <DISABLE_externalInterrupt+0x4e>
     7c4:	2b 81       	ldd	r18, Y+3	; 0x03
     7c6:	3c 81       	ldd	r19, Y+4	; 0x04
     7c8:	22 30       	cpi	r18, 0x02	; 2
     7ca:	31 05       	cpc	r19, r1
     7cc:	a1 f0       	breq	.+40     	; 0x7f6 <DISABLE_externalInterrupt+0x5e>
     7ce:	8b 81       	ldd	r24, Y+3	; 0x03
     7d0:	9c 81       	ldd	r25, Y+4	; 0x04
     7d2:	00 97       	sbiw	r24, 0x00	; 0
     7d4:	c9 f4       	brne	.+50     	; 0x808 <DISABLE_externalInterrupt+0x70>
			{
				case EXTINT0 : CLEAR_BIT(INTERRUPT_ENABLE_REGISTER_EXT0,ENABLE_EXT0_BIT);break;
     7d6:	ab e5       	ldi	r26, 0x5B	; 91
     7d8:	b0 e0       	ldi	r27, 0x00	; 0
     7da:	eb e5       	ldi	r30, 0x5B	; 91
     7dc:	f0 e0       	ldi	r31, 0x00	; 0
     7de:	80 81       	ld	r24, Z
     7e0:	8f 7b       	andi	r24, 0xBF	; 191
     7e2:	8c 93       	st	X, r24
     7e4:	11 c0       	rjmp	.+34     	; 0x808 <DISABLE_externalInterrupt+0x70>
				case EXTINT1 : CLEAR_BIT(INTERRUPT_ENABLE_REGISTER_EXT1,ENABLE_EXT1_BIT);break;
     7e6:	ab e5       	ldi	r26, 0x5B	; 91
     7e8:	b0 e0       	ldi	r27, 0x00	; 0
     7ea:	eb e5       	ldi	r30, 0x5B	; 91
     7ec:	f0 e0       	ldi	r31, 0x00	; 0
     7ee:	80 81       	ld	r24, Z
     7f0:	8f 77       	andi	r24, 0x7F	; 127
     7f2:	8c 93       	st	X, r24
     7f4:	09 c0       	rjmp	.+18     	; 0x808 <DISABLE_externalInterrupt+0x70>
				case EXTINT2 : CLEAR_BIT(INTERRUPT_ENABLE_REGISTER_EXT2,ENABLE_EXT2_BIT);break;
     7f6:	ab e5       	ldi	r26, 0x5B	; 91
     7f8:	b0 e0       	ldi	r27, 0x00	; 0
     7fa:	eb e5       	ldi	r30, 0x5B	; 91
     7fc:	f0 e0       	ldi	r31, 0x00	; 0
     7fe:	80 81       	ld	r24, Z
     800:	8f 7d       	andi	r24, 0xDF	; 223
     802:	8c 93       	st	X, r24
     804:	01 c0       	rjmp	.+2      	; 0x808 <DISABLE_externalInterrupt+0x70>
			}
		}
		else
		{
			ERROR_STATE = NOTOK;
     806:	19 82       	std	Y+1, r1	; 0x01
		}
		return ERROR_STATE;
     808:	89 81       	ldd	r24, Y+1	; 0x01

}
     80a:	0f 90       	pop	r0
     80c:	0f 90       	pop	r0
     80e:	0f 90       	pop	r0
     810:	0f 90       	pop	r0
     812:	cf 91       	pop	r28
     814:	df 91       	pop	r29
     816:	08 95       	ret

00000818 <EXTERNAL_interruptSetCallBack>:



/************** Set callback function provided to App****************/
uint8 EXTERNAL_interruptSetCallBack(void (* Local_ptrTOfunc)(void),uint8 select_INT)
{
     818:	df 93       	push	r29
     81a:	cf 93       	push	r28
     81c:	00 d0       	rcall	.+0      	; 0x81e <EXTERNAL_interruptSetCallBack+0x6>
     81e:	00 d0       	rcall	.+0      	; 0x820 <EXTERNAL_interruptSetCallBack+0x8>
     820:	cd b7       	in	r28, 0x3d	; 61
     822:	de b7       	in	r29, 0x3e	; 62
     824:	9b 83       	std	Y+3, r25	; 0x03
     826:	8a 83       	std	Y+2, r24	; 0x02
     828:	6c 83       	std	Y+4, r22	; 0x04
	/*************** This variable for checking error*****************/
	uint8 ERROR_STATE = OK;
     82a:	81 e0       	ldi	r24, 0x01	; 1
     82c:	89 83       	std	Y+1, r24	; 0x01
	if((select_INT <= EXTINT2) && (Local_ptrTOfunc != NULL_PTR) )
     82e:	8c 81       	ldd	r24, Y+4	; 0x04
     830:	83 30       	cpi	r24, 0x03	; 3
     832:	88 f4       	brcc	.+34     	; 0x856 <EXTERNAL_interruptSetCallBack+0x3e>
     834:	8a 81       	ldd	r24, Y+2	; 0x02
     836:	9b 81       	ldd	r25, Y+3	; 0x03
     838:	00 97       	sbiw	r24, 0x00	; 0
     83a:	69 f0       	breq	.+26     	; 0x856 <EXTERNAL_interruptSetCallBack+0x3e>
	{
		/**** Up data the global pointer to function by local pointer to function from APP***/
		ArrPtrToFunction[select_INT] = Local_ptrTOfunc;
     83c:	8c 81       	ldd	r24, Y+4	; 0x04
     83e:	88 2f       	mov	r24, r24
     840:	90 e0       	ldi	r25, 0x00	; 0
     842:	88 0f       	add	r24, r24
     844:	99 1f       	adc	r25, r25
     846:	fc 01       	movw	r30, r24
     848:	ee 56       	subi	r30, 0x6E	; 110
     84a:	ff 4f       	sbci	r31, 0xFF	; 255
     84c:	8a 81       	ldd	r24, Y+2	; 0x02
     84e:	9b 81       	ldd	r25, Y+3	; 0x03
     850:	91 83       	std	Z+1, r25	; 0x01
     852:	80 83       	st	Z, r24
     854:	01 c0       	rjmp	.+2      	; 0x858 <EXTERNAL_interruptSetCallBack+0x40>
	}
	else
	{
		ERROR_STATE = NOTOK;
     856:	19 82       	std	Y+1, r1	; 0x01
	}
	return ERROR_STATE;
     858:	89 81       	ldd	r24, Y+1	; 0x01
}
     85a:	0f 90       	pop	r0
     85c:	0f 90       	pop	r0
     85e:	0f 90       	pop	r0
     860:	0f 90       	pop	r0
     862:	cf 91       	pop	r28
     864:	df 91       	pop	r29
     866:	08 95       	ret

00000868 <__vector_1>:
/********* According the pre_build configuration:********************/
#if                EXT0_SELECTION              ==                ENABLE
/************** This is the handler routine for external interrupt zer0********/
void __vector_1(void)           __attribute__((signal));
void __vector_1(void)
{
     868:	1f 92       	push	r1
     86a:	0f 92       	push	r0
     86c:	0f b6       	in	r0, 0x3f	; 63
     86e:	0f 92       	push	r0
     870:	11 24       	eor	r1, r1
     872:	2f 93       	push	r18
     874:	3f 93       	push	r19
     876:	4f 93       	push	r20
     878:	5f 93       	push	r21
     87a:	6f 93       	push	r22
     87c:	7f 93       	push	r23
     87e:	8f 93       	push	r24
     880:	9f 93       	push	r25
     882:	af 93       	push	r26
     884:	bf 93       	push	r27
     886:	ef 93       	push	r30
     888:	ff 93       	push	r31
     88a:	df 93       	push	r29
     88c:	cf 93       	push	r28
     88e:	cd b7       	in	r28, 0x3d	; 61
     890:	de b7       	in	r29, 0x3e	; 62
	/* To avoid the willed pointer or dereference to garbage address*/
	if(ArrPtrToFunction[EXTINT0] != NULL_PTR)
     892:	80 91 92 00 	lds	r24, 0x0092
     896:	90 91 93 00 	lds	r25, 0x0093
     89a:	00 97       	sbiw	r24, 0x00	; 0
     89c:	29 f0       	breq	.+10     	; 0x8a8 <__vector_1+0x40>
	{
		(* ArrPtrToFunction[EXTINT0])();
     89e:	e0 91 92 00 	lds	r30, 0x0092
     8a2:	f0 91 93 00 	lds	r31, 0x0093
     8a6:	09 95       	icall
	}

}
     8a8:	cf 91       	pop	r28
     8aa:	df 91       	pop	r29
     8ac:	ff 91       	pop	r31
     8ae:	ef 91       	pop	r30
     8b0:	bf 91       	pop	r27
     8b2:	af 91       	pop	r26
     8b4:	9f 91       	pop	r25
     8b6:	8f 91       	pop	r24
     8b8:	7f 91       	pop	r23
     8ba:	6f 91       	pop	r22
     8bc:	5f 91       	pop	r21
     8be:	4f 91       	pop	r20
     8c0:	3f 91       	pop	r19
     8c2:	2f 91       	pop	r18
     8c4:	0f 90       	pop	r0
     8c6:	0f be       	out	0x3f, r0	; 63
     8c8:	0f 90       	pop	r0
     8ca:	1f 90       	pop	r1
     8cc:	18 95       	reti

000008ce <__vector_2>:
/********* According the pre_build configuration:********************/
#if                EXT1_SELECTION              ==                ENABLE
/************** This is the handler routine for external interrupt one ********/
void __vector_2(void)           __attribute__((signal));
void __vector_2(void)
{
     8ce:	1f 92       	push	r1
     8d0:	0f 92       	push	r0
     8d2:	0f b6       	in	r0, 0x3f	; 63
     8d4:	0f 92       	push	r0
     8d6:	11 24       	eor	r1, r1
     8d8:	2f 93       	push	r18
     8da:	3f 93       	push	r19
     8dc:	4f 93       	push	r20
     8de:	5f 93       	push	r21
     8e0:	6f 93       	push	r22
     8e2:	7f 93       	push	r23
     8e4:	8f 93       	push	r24
     8e6:	9f 93       	push	r25
     8e8:	af 93       	push	r26
     8ea:	bf 93       	push	r27
     8ec:	ef 93       	push	r30
     8ee:	ff 93       	push	r31
     8f0:	df 93       	push	r29
     8f2:	cf 93       	push	r28
     8f4:	cd b7       	in	r28, 0x3d	; 61
     8f6:	de b7       	in	r29, 0x3e	; 62
	/* To avoid the willed pointer or dereference to garbage address*/
	if(ArrPtrToFunction[EXTINT1] != NULL_PTR)
     8f8:	80 91 94 00 	lds	r24, 0x0094
     8fc:	90 91 95 00 	lds	r25, 0x0095
     900:	00 97       	sbiw	r24, 0x00	; 0
     902:	29 f0       	breq	.+10     	; 0x90e <__vector_2+0x40>
	{
		(* ArrPtrToFunction[EXTINT1])();
     904:	e0 91 94 00 	lds	r30, 0x0094
     908:	f0 91 95 00 	lds	r31, 0x0095
     90c:	09 95       	icall
	}
}
     90e:	cf 91       	pop	r28
     910:	df 91       	pop	r29
     912:	ff 91       	pop	r31
     914:	ef 91       	pop	r30
     916:	bf 91       	pop	r27
     918:	af 91       	pop	r26
     91a:	9f 91       	pop	r25
     91c:	8f 91       	pop	r24
     91e:	7f 91       	pop	r23
     920:	6f 91       	pop	r22
     922:	5f 91       	pop	r21
     924:	4f 91       	pop	r20
     926:	3f 91       	pop	r19
     928:	2f 91       	pop	r18
     92a:	0f 90       	pop	r0
     92c:	0f be       	out	0x3f, r0	; 63
     92e:	0f 90       	pop	r0
     930:	1f 90       	pop	r1
     932:	18 95       	reti

00000934 <__vector_3>:
/********* According the pre_build configuration:********************/
#if                EXT2_SELECTION              ==                 ENABLE
/************** This is the handler routine for external interrupt two********/
void __vector_3(void)           __attribute__((signal));
void __vector_3(void)
{
     934:	1f 92       	push	r1
     936:	0f 92       	push	r0
     938:	0f b6       	in	r0, 0x3f	; 63
     93a:	0f 92       	push	r0
     93c:	11 24       	eor	r1, r1
     93e:	2f 93       	push	r18
     940:	3f 93       	push	r19
     942:	4f 93       	push	r20
     944:	5f 93       	push	r21
     946:	6f 93       	push	r22
     948:	7f 93       	push	r23
     94a:	8f 93       	push	r24
     94c:	9f 93       	push	r25
     94e:	af 93       	push	r26
     950:	bf 93       	push	r27
     952:	ef 93       	push	r30
     954:	ff 93       	push	r31
     956:	df 93       	push	r29
     958:	cf 93       	push	r28
     95a:	cd b7       	in	r28, 0x3d	; 61
     95c:	de b7       	in	r29, 0x3e	; 62
	/* To avoid the willed pointer or dereference to garbage address*/
	if(ArrPtrToFunction[EXTINT2] != NULL_PTR)
     95e:	80 91 96 00 	lds	r24, 0x0096
     962:	90 91 97 00 	lds	r25, 0x0097
     966:	00 97       	sbiw	r24, 0x00	; 0
     968:	29 f0       	breq	.+10     	; 0x974 <__vector_3+0x40>
	{
		 ArrPtrToFunction[EXTINT2]();
     96a:	e0 91 96 00 	lds	r30, 0x0096
     96e:	f0 91 97 00 	lds	r31, 0x0097
     972:	09 95       	icall
	}
}
     974:	cf 91       	pop	r28
     976:	df 91       	pop	r29
     978:	ff 91       	pop	r31
     97a:	ef 91       	pop	r30
     97c:	bf 91       	pop	r27
     97e:	af 91       	pop	r26
     980:	9f 91       	pop	r25
     982:	8f 91       	pop	r24
     984:	7f 91       	pop	r23
     986:	6f 91       	pop	r22
     988:	5f 91       	pop	r21
     98a:	4f 91       	pop	r20
     98c:	3f 91       	pop	r19
     98e:	2f 91       	pop	r18
     990:	0f 90       	pop	r0
     992:	0f be       	out	0x3f, r0	; 63
     994:	0f 90       	pop	r0
     996:	1f 90       	pop	r1
     998:	18 95       	reti

0000099a <GPIO_setupPinDirection>:
#include"gpio_privte.h"
#include"../../UTILS/common_macro.h"

/*** Implementation of function, use to determine the pin mode***/
void GPIO_setupPinDirection(uint8 port_num,uint8 pin_num,GPIO_PinDircetonType direction)
{
     99a:	df 93       	push	r29
     99c:	cf 93       	push	r28
     99e:	00 d0       	rcall	.+0      	; 0x9a0 <GPIO_setupPinDirection+0x6>
     9a0:	00 d0       	rcall	.+0      	; 0x9a2 <GPIO_setupPinDirection+0x8>
     9a2:	0f 92       	push	r0
     9a4:	cd b7       	in	r28, 0x3d	; 61
     9a6:	de b7       	in	r29, 0x3e	; 62
     9a8:	89 83       	std	Y+1, r24	; 0x01
     9aa:	6a 83       	std	Y+2, r22	; 0x02
     9ac:	4b 83       	std	Y+3, r20	; 0x03
	if(!((port_num > 3) || (pin_num > 7)))
     9ae:	89 81       	ldd	r24, Y+1	; 0x01
     9b0:	84 30       	cpi	r24, 0x04	; 4
     9b2:	08 f0       	brcs	.+2      	; 0x9b6 <GPIO_setupPinDirection+0x1c>
     9b4:	d5 c0       	rjmp	.+426    	; 0xb60 <GPIO_setupPinDirection+0x1c6>
     9b6:	8a 81       	ldd	r24, Y+2	; 0x02
     9b8:	88 30       	cpi	r24, 0x08	; 8
     9ba:	08 f0       	brcs	.+2      	; 0x9be <GPIO_setupPinDirection+0x24>
     9bc:	d1 c0       	rjmp	.+418    	; 0xb60 <GPIO_setupPinDirection+0x1c6>
	{
		switch(port_num)
     9be:	89 81       	ldd	r24, Y+1	; 0x01
     9c0:	28 2f       	mov	r18, r24
     9c2:	30 e0       	ldi	r19, 0x00	; 0
     9c4:	3d 83       	std	Y+5, r19	; 0x05
     9c6:	2c 83       	std	Y+4, r18	; 0x04
     9c8:	8c 81       	ldd	r24, Y+4	; 0x04
     9ca:	9d 81       	ldd	r25, Y+5	; 0x05
     9cc:	81 30       	cpi	r24, 0x01	; 1
     9ce:	91 05       	cpc	r25, r1
     9d0:	09 f4       	brne	.+2      	; 0x9d4 <GPIO_setupPinDirection+0x3a>
     9d2:	43 c0       	rjmp	.+134    	; 0xa5a <GPIO_setupPinDirection+0xc0>
     9d4:	2c 81       	ldd	r18, Y+4	; 0x04
     9d6:	3d 81       	ldd	r19, Y+5	; 0x05
     9d8:	22 30       	cpi	r18, 0x02	; 2
     9da:	31 05       	cpc	r19, r1
     9dc:	2c f4       	brge	.+10     	; 0x9e8 <GPIO_setupPinDirection+0x4e>
     9de:	8c 81       	ldd	r24, Y+4	; 0x04
     9e0:	9d 81       	ldd	r25, Y+5	; 0x05
     9e2:	00 97       	sbiw	r24, 0x00	; 0
     9e4:	71 f0       	breq	.+28     	; 0xa02 <GPIO_setupPinDirection+0x68>
     9e6:	bc c0       	rjmp	.+376    	; 0xb60 <GPIO_setupPinDirection+0x1c6>
     9e8:	2c 81       	ldd	r18, Y+4	; 0x04
     9ea:	3d 81       	ldd	r19, Y+5	; 0x05
     9ec:	22 30       	cpi	r18, 0x02	; 2
     9ee:	31 05       	cpc	r19, r1
     9f0:	09 f4       	brne	.+2      	; 0x9f4 <GPIO_setupPinDirection+0x5a>
     9f2:	5f c0       	rjmp	.+190    	; 0xab2 <GPIO_setupPinDirection+0x118>
     9f4:	8c 81       	ldd	r24, Y+4	; 0x04
     9f6:	9d 81       	ldd	r25, Y+5	; 0x05
     9f8:	83 30       	cpi	r24, 0x03	; 3
     9fa:	91 05       	cpc	r25, r1
     9fc:	09 f4       	brne	.+2      	; 0xa00 <GPIO_setupPinDirection+0x66>
     9fe:	85 c0       	rjmp	.+266    	; 0xb0a <GPIO_setupPinDirection+0x170>
     a00:	af c0       	rjmp	.+350    	; 0xb60 <GPIO_setupPinDirection+0x1c6>
		{
			case PORTA_ID:
				if(direction == PIN_OUTPUT)
     a02:	8b 81       	ldd	r24, Y+3	; 0x03
     a04:	81 30       	cpi	r24, 0x01	; 1
     a06:	a1 f4       	brne	.+40     	; 0xa30 <GPIO_setupPinDirection+0x96>
				{
					SET_BIT(DDRA_ID_REG,pin_num);
     a08:	aa e3       	ldi	r26, 0x3A	; 58
     a0a:	b0 e0       	ldi	r27, 0x00	; 0
     a0c:	ea e3       	ldi	r30, 0x3A	; 58
     a0e:	f0 e0       	ldi	r31, 0x00	; 0
     a10:	80 81       	ld	r24, Z
     a12:	48 2f       	mov	r20, r24
     a14:	8a 81       	ldd	r24, Y+2	; 0x02
     a16:	28 2f       	mov	r18, r24
     a18:	30 e0       	ldi	r19, 0x00	; 0
     a1a:	81 e0       	ldi	r24, 0x01	; 1
     a1c:	90 e0       	ldi	r25, 0x00	; 0
     a1e:	02 2e       	mov	r0, r18
     a20:	02 c0       	rjmp	.+4      	; 0xa26 <GPIO_setupPinDirection+0x8c>
     a22:	88 0f       	add	r24, r24
     a24:	99 1f       	adc	r25, r25
     a26:	0a 94       	dec	r0
     a28:	e2 f7       	brpl	.-8      	; 0xa22 <GPIO_setupPinDirection+0x88>
     a2a:	84 2b       	or	r24, r20
     a2c:	8c 93       	st	X, r24
     a2e:	98 c0       	rjmp	.+304    	; 0xb60 <GPIO_setupPinDirection+0x1c6>
				}
				else
				{
					CLEAR_BIT(DDRA_ID_REG,pin_num);
     a30:	aa e3       	ldi	r26, 0x3A	; 58
     a32:	b0 e0       	ldi	r27, 0x00	; 0
     a34:	ea e3       	ldi	r30, 0x3A	; 58
     a36:	f0 e0       	ldi	r31, 0x00	; 0
     a38:	80 81       	ld	r24, Z
     a3a:	48 2f       	mov	r20, r24
     a3c:	8a 81       	ldd	r24, Y+2	; 0x02
     a3e:	28 2f       	mov	r18, r24
     a40:	30 e0       	ldi	r19, 0x00	; 0
     a42:	81 e0       	ldi	r24, 0x01	; 1
     a44:	90 e0       	ldi	r25, 0x00	; 0
     a46:	02 2e       	mov	r0, r18
     a48:	02 c0       	rjmp	.+4      	; 0xa4e <GPIO_setupPinDirection+0xb4>
     a4a:	88 0f       	add	r24, r24
     a4c:	99 1f       	adc	r25, r25
     a4e:	0a 94       	dec	r0
     a50:	e2 f7       	brpl	.-8      	; 0xa4a <GPIO_setupPinDirection+0xb0>
     a52:	80 95       	com	r24
     a54:	84 23       	and	r24, r20
     a56:	8c 93       	st	X, r24
     a58:	83 c0       	rjmp	.+262    	; 0xb60 <GPIO_setupPinDirection+0x1c6>
				}
				break;
			case PORTB_ID:
				if(direction == PIN_OUTPUT)
     a5a:	8b 81       	ldd	r24, Y+3	; 0x03
     a5c:	81 30       	cpi	r24, 0x01	; 1
     a5e:	a1 f4       	brne	.+40     	; 0xa88 <GPIO_setupPinDirection+0xee>
				{
					SET_BIT(DDRB_ID_REG,pin_num);
     a60:	a7 e3       	ldi	r26, 0x37	; 55
     a62:	b0 e0       	ldi	r27, 0x00	; 0
     a64:	e7 e3       	ldi	r30, 0x37	; 55
     a66:	f0 e0       	ldi	r31, 0x00	; 0
     a68:	80 81       	ld	r24, Z
     a6a:	48 2f       	mov	r20, r24
     a6c:	8a 81       	ldd	r24, Y+2	; 0x02
     a6e:	28 2f       	mov	r18, r24
     a70:	30 e0       	ldi	r19, 0x00	; 0
     a72:	81 e0       	ldi	r24, 0x01	; 1
     a74:	90 e0       	ldi	r25, 0x00	; 0
     a76:	02 2e       	mov	r0, r18
     a78:	02 c0       	rjmp	.+4      	; 0xa7e <GPIO_setupPinDirection+0xe4>
     a7a:	88 0f       	add	r24, r24
     a7c:	99 1f       	adc	r25, r25
     a7e:	0a 94       	dec	r0
     a80:	e2 f7       	brpl	.-8      	; 0xa7a <GPIO_setupPinDirection+0xe0>
     a82:	84 2b       	or	r24, r20
     a84:	8c 93       	st	X, r24
     a86:	6c c0       	rjmp	.+216    	; 0xb60 <GPIO_setupPinDirection+0x1c6>
				}
				else
				{
					CLEAR_BIT(DDRB_ID_REG,pin_num);
     a88:	a7 e3       	ldi	r26, 0x37	; 55
     a8a:	b0 e0       	ldi	r27, 0x00	; 0
     a8c:	e7 e3       	ldi	r30, 0x37	; 55
     a8e:	f0 e0       	ldi	r31, 0x00	; 0
     a90:	80 81       	ld	r24, Z
     a92:	48 2f       	mov	r20, r24
     a94:	8a 81       	ldd	r24, Y+2	; 0x02
     a96:	28 2f       	mov	r18, r24
     a98:	30 e0       	ldi	r19, 0x00	; 0
     a9a:	81 e0       	ldi	r24, 0x01	; 1
     a9c:	90 e0       	ldi	r25, 0x00	; 0
     a9e:	02 2e       	mov	r0, r18
     aa0:	02 c0       	rjmp	.+4      	; 0xaa6 <GPIO_setupPinDirection+0x10c>
     aa2:	88 0f       	add	r24, r24
     aa4:	99 1f       	adc	r25, r25
     aa6:	0a 94       	dec	r0
     aa8:	e2 f7       	brpl	.-8      	; 0xaa2 <GPIO_setupPinDirection+0x108>
     aaa:	80 95       	com	r24
     aac:	84 23       	and	r24, r20
     aae:	8c 93       	st	X, r24
     ab0:	57 c0       	rjmp	.+174    	; 0xb60 <GPIO_setupPinDirection+0x1c6>
				}
				break;
			case PORTC_ID:
				if(direction == PIN_OUTPUT)
     ab2:	8b 81       	ldd	r24, Y+3	; 0x03
     ab4:	81 30       	cpi	r24, 0x01	; 1
     ab6:	a1 f4       	brne	.+40     	; 0xae0 <GPIO_setupPinDirection+0x146>
				{
					SET_BIT(DDRC_ID_REG,pin_num);
     ab8:	a4 e3       	ldi	r26, 0x34	; 52
     aba:	b0 e0       	ldi	r27, 0x00	; 0
     abc:	e4 e3       	ldi	r30, 0x34	; 52
     abe:	f0 e0       	ldi	r31, 0x00	; 0
     ac0:	80 81       	ld	r24, Z
     ac2:	48 2f       	mov	r20, r24
     ac4:	8a 81       	ldd	r24, Y+2	; 0x02
     ac6:	28 2f       	mov	r18, r24
     ac8:	30 e0       	ldi	r19, 0x00	; 0
     aca:	81 e0       	ldi	r24, 0x01	; 1
     acc:	90 e0       	ldi	r25, 0x00	; 0
     ace:	02 2e       	mov	r0, r18
     ad0:	02 c0       	rjmp	.+4      	; 0xad6 <GPIO_setupPinDirection+0x13c>
     ad2:	88 0f       	add	r24, r24
     ad4:	99 1f       	adc	r25, r25
     ad6:	0a 94       	dec	r0
     ad8:	e2 f7       	brpl	.-8      	; 0xad2 <GPIO_setupPinDirection+0x138>
     ada:	84 2b       	or	r24, r20
     adc:	8c 93       	st	X, r24
     ade:	40 c0       	rjmp	.+128    	; 0xb60 <GPIO_setupPinDirection+0x1c6>
				}
				else
				{
					CLEAR_BIT(DDRC_ID_REG,pin_num);
     ae0:	a4 e3       	ldi	r26, 0x34	; 52
     ae2:	b0 e0       	ldi	r27, 0x00	; 0
     ae4:	e4 e3       	ldi	r30, 0x34	; 52
     ae6:	f0 e0       	ldi	r31, 0x00	; 0
     ae8:	80 81       	ld	r24, Z
     aea:	48 2f       	mov	r20, r24
     aec:	8a 81       	ldd	r24, Y+2	; 0x02
     aee:	28 2f       	mov	r18, r24
     af0:	30 e0       	ldi	r19, 0x00	; 0
     af2:	81 e0       	ldi	r24, 0x01	; 1
     af4:	90 e0       	ldi	r25, 0x00	; 0
     af6:	02 2e       	mov	r0, r18
     af8:	02 c0       	rjmp	.+4      	; 0xafe <GPIO_setupPinDirection+0x164>
     afa:	88 0f       	add	r24, r24
     afc:	99 1f       	adc	r25, r25
     afe:	0a 94       	dec	r0
     b00:	e2 f7       	brpl	.-8      	; 0xafa <GPIO_setupPinDirection+0x160>
     b02:	80 95       	com	r24
     b04:	84 23       	and	r24, r20
     b06:	8c 93       	st	X, r24
     b08:	2b c0       	rjmp	.+86     	; 0xb60 <GPIO_setupPinDirection+0x1c6>
				}
				break;
			case PORTD_ID:
				if(direction == PIN_OUTPUT)
     b0a:	8b 81       	ldd	r24, Y+3	; 0x03
     b0c:	81 30       	cpi	r24, 0x01	; 1
     b0e:	a1 f4       	brne	.+40     	; 0xb38 <GPIO_setupPinDirection+0x19e>
				{
					SET_BIT(DDRD_ID_REG,pin_num);
     b10:	a1 e3       	ldi	r26, 0x31	; 49
     b12:	b0 e0       	ldi	r27, 0x00	; 0
     b14:	e1 e3       	ldi	r30, 0x31	; 49
     b16:	f0 e0       	ldi	r31, 0x00	; 0
     b18:	80 81       	ld	r24, Z
     b1a:	48 2f       	mov	r20, r24
     b1c:	8a 81       	ldd	r24, Y+2	; 0x02
     b1e:	28 2f       	mov	r18, r24
     b20:	30 e0       	ldi	r19, 0x00	; 0
     b22:	81 e0       	ldi	r24, 0x01	; 1
     b24:	90 e0       	ldi	r25, 0x00	; 0
     b26:	02 2e       	mov	r0, r18
     b28:	02 c0       	rjmp	.+4      	; 0xb2e <GPIO_setupPinDirection+0x194>
     b2a:	88 0f       	add	r24, r24
     b2c:	99 1f       	adc	r25, r25
     b2e:	0a 94       	dec	r0
     b30:	e2 f7       	brpl	.-8      	; 0xb2a <GPIO_setupPinDirection+0x190>
     b32:	84 2b       	or	r24, r20
     b34:	8c 93       	st	X, r24
     b36:	14 c0       	rjmp	.+40     	; 0xb60 <GPIO_setupPinDirection+0x1c6>
				}
				else
				{
					CLEAR_BIT(DDRD_ID_REG,pin_num);
     b38:	a1 e3       	ldi	r26, 0x31	; 49
     b3a:	b0 e0       	ldi	r27, 0x00	; 0
     b3c:	e1 e3       	ldi	r30, 0x31	; 49
     b3e:	f0 e0       	ldi	r31, 0x00	; 0
     b40:	80 81       	ld	r24, Z
     b42:	48 2f       	mov	r20, r24
     b44:	8a 81       	ldd	r24, Y+2	; 0x02
     b46:	28 2f       	mov	r18, r24
     b48:	30 e0       	ldi	r19, 0x00	; 0
     b4a:	81 e0       	ldi	r24, 0x01	; 1
     b4c:	90 e0       	ldi	r25, 0x00	; 0
     b4e:	02 2e       	mov	r0, r18
     b50:	02 c0       	rjmp	.+4      	; 0xb56 <GPIO_setupPinDirection+0x1bc>
     b52:	88 0f       	add	r24, r24
     b54:	99 1f       	adc	r25, r25
     b56:	0a 94       	dec	r0
     b58:	e2 f7       	brpl	.-8      	; 0xb52 <GPIO_setupPinDirection+0x1b8>
     b5a:	80 95       	com	r24
     b5c:	84 23       	and	r24, r20
     b5e:	8c 93       	st	X, r24
				}
				break;
		}
	}
}
     b60:	0f 90       	pop	r0
     b62:	0f 90       	pop	r0
     b64:	0f 90       	pop	r0
     b66:	0f 90       	pop	r0
     b68:	0f 90       	pop	r0
     b6a:	cf 91       	pop	r28
     b6c:	df 91       	pop	r29
     b6e:	08 95       	ret

00000b70 <GPIO_writePin>:
/*** Implementation of function, use to write the pin value***/
void GPIO_writePin(uint8 port_num,uint8 pin_num,uint8 value)
{
     b70:	df 93       	push	r29
     b72:	cf 93       	push	r28
     b74:	00 d0       	rcall	.+0      	; 0xb76 <GPIO_writePin+0x6>
     b76:	00 d0       	rcall	.+0      	; 0xb78 <GPIO_writePin+0x8>
     b78:	0f 92       	push	r0
     b7a:	cd b7       	in	r28, 0x3d	; 61
     b7c:	de b7       	in	r29, 0x3e	; 62
     b7e:	89 83       	std	Y+1, r24	; 0x01
     b80:	6a 83       	std	Y+2, r22	; 0x02
     b82:	4b 83       	std	Y+3, r20	; 0x03
	if(!((port_num > 3) || (pin_num > 7)))
     b84:	89 81       	ldd	r24, Y+1	; 0x01
     b86:	84 30       	cpi	r24, 0x04	; 4
     b88:	08 f0       	brcs	.+2      	; 0xb8c <GPIO_writePin+0x1c>
     b8a:	d5 c0       	rjmp	.+426    	; 0xd36 <GPIO_writePin+0x1c6>
     b8c:	8a 81       	ldd	r24, Y+2	; 0x02
     b8e:	88 30       	cpi	r24, 0x08	; 8
     b90:	08 f0       	brcs	.+2      	; 0xb94 <GPIO_writePin+0x24>
     b92:	d1 c0       	rjmp	.+418    	; 0xd36 <GPIO_writePin+0x1c6>
	{
		switch(port_num)
     b94:	89 81       	ldd	r24, Y+1	; 0x01
     b96:	28 2f       	mov	r18, r24
     b98:	30 e0       	ldi	r19, 0x00	; 0
     b9a:	3d 83       	std	Y+5, r19	; 0x05
     b9c:	2c 83       	std	Y+4, r18	; 0x04
     b9e:	8c 81       	ldd	r24, Y+4	; 0x04
     ba0:	9d 81       	ldd	r25, Y+5	; 0x05
     ba2:	81 30       	cpi	r24, 0x01	; 1
     ba4:	91 05       	cpc	r25, r1
     ba6:	09 f4       	brne	.+2      	; 0xbaa <GPIO_writePin+0x3a>
     ba8:	43 c0       	rjmp	.+134    	; 0xc30 <GPIO_writePin+0xc0>
     baa:	2c 81       	ldd	r18, Y+4	; 0x04
     bac:	3d 81       	ldd	r19, Y+5	; 0x05
     bae:	22 30       	cpi	r18, 0x02	; 2
     bb0:	31 05       	cpc	r19, r1
     bb2:	2c f4       	brge	.+10     	; 0xbbe <GPIO_writePin+0x4e>
     bb4:	8c 81       	ldd	r24, Y+4	; 0x04
     bb6:	9d 81       	ldd	r25, Y+5	; 0x05
     bb8:	00 97       	sbiw	r24, 0x00	; 0
     bba:	71 f0       	breq	.+28     	; 0xbd8 <GPIO_writePin+0x68>
     bbc:	bc c0       	rjmp	.+376    	; 0xd36 <GPIO_writePin+0x1c6>
     bbe:	2c 81       	ldd	r18, Y+4	; 0x04
     bc0:	3d 81       	ldd	r19, Y+5	; 0x05
     bc2:	22 30       	cpi	r18, 0x02	; 2
     bc4:	31 05       	cpc	r19, r1
     bc6:	09 f4       	brne	.+2      	; 0xbca <GPIO_writePin+0x5a>
     bc8:	5f c0       	rjmp	.+190    	; 0xc88 <GPIO_writePin+0x118>
     bca:	8c 81       	ldd	r24, Y+4	; 0x04
     bcc:	9d 81       	ldd	r25, Y+5	; 0x05
     bce:	83 30       	cpi	r24, 0x03	; 3
     bd0:	91 05       	cpc	r25, r1
     bd2:	09 f4       	brne	.+2      	; 0xbd6 <GPIO_writePin+0x66>
     bd4:	85 c0       	rjmp	.+266    	; 0xce0 <GPIO_writePin+0x170>
     bd6:	af c0       	rjmp	.+350    	; 0xd36 <GPIO_writePin+0x1c6>
		{
			case PORTA_ID:
				if(value == LOGIC_HIGH)
     bd8:	8b 81       	ldd	r24, Y+3	; 0x03
     bda:	81 30       	cpi	r24, 0x01	; 1
     bdc:	a1 f4       	brne	.+40     	; 0xc06 <GPIO_writePin+0x96>
				{
					SET_BIT(PORTA_ID_REG,pin_num);
     bde:	ab e3       	ldi	r26, 0x3B	; 59
     be0:	b0 e0       	ldi	r27, 0x00	; 0
     be2:	eb e3       	ldi	r30, 0x3B	; 59
     be4:	f0 e0       	ldi	r31, 0x00	; 0
     be6:	80 81       	ld	r24, Z
     be8:	48 2f       	mov	r20, r24
     bea:	8a 81       	ldd	r24, Y+2	; 0x02
     bec:	28 2f       	mov	r18, r24
     bee:	30 e0       	ldi	r19, 0x00	; 0
     bf0:	81 e0       	ldi	r24, 0x01	; 1
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	02 2e       	mov	r0, r18
     bf6:	02 c0       	rjmp	.+4      	; 0xbfc <GPIO_writePin+0x8c>
     bf8:	88 0f       	add	r24, r24
     bfa:	99 1f       	adc	r25, r25
     bfc:	0a 94       	dec	r0
     bfe:	e2 f7       	brpl	.-8      	; 0xbf8 <GPIO_writePin+0x88>
     c00:	84 2b       	or	r24, r20
     c02:	8c 93       	st	X, r24
     c04:	98 c0       	rjmp	.+304    	; 0xd36 <GPIO_writePin+0x1c6>
				}
				else
				{
					CLEAR_BIT(PORTA_ID_REG,pin_num);
     c06:	ab e3       	ldi	r26, 0x3B	; 59
     c08:	b0 e0       	ldi	r27, 0x00	; 0
     c0a:	eb e3       	ldi	r30, 0x3B	; 59
     c0c:	f0 e0       	ldi	r31, 0x00	; 0
     c0e:	80 81       	ld	r24, Z
     c10:	48 2f       	mov	r20, r24
     c12:	8a 81       	ldd	r24, Y+2	; 0x02
     c14:	28 2f       	mov	r18, r24
     c16:	30 e0       	ldi	r19, 0x00	; 0
     c18:	81 e0       	ldi	r24, 0x01	; 1
     c1a:	90 e0       	ldi	r25, 0x00	; 0
     c1c:	02 2e       	mov	r0, r18
     c1e:	02 c0       	rjmp	.+4      	; 0xc24 <GPIO_writePin+0xb4>
     c20:	88 0f       	add	r24, r24
     c22:	99 1f       	adc	r25, r25
     c24:	0a 94       	dec	r0
     c26:	e2 f7       	brpl	.-8      	; 0xc20 <GPIO_writePin+0xb0>
     c28:	80 95       	com	r24
     c2a:	84 23       	and	r24, r20
     c2c:	8c 93       	st	X, r24
     c2e:	83 c0       	rjmp	.+262    	; 0xd36 <GPIO_writePin+0x1c6>
				}
				break;
			case PORTB_ID:
				if(value == LOGIC_HIGH)
     c30:	8b 81       	ldd	r24, Y+3	; 0x03
     c32:	81 30       	cpi	r24, 0x01	; 1
     c34:	a1 f4       	brne	.+40     	; 0xc5e <GPIO_writePin+0xee>
				{
					SET_BIT(PORTB_ID_REG,pin_num);
     c36:	a8 e3       	ldi	r26, 0x38	; 56
     c38:	b0 e0       	ldi	r27, 0x00	; 0
     c3a:	e8 e3       	ldi	r30, 0x38	; 56
     c3c:	f0 e0       	ldi	r31, 0x00	; 0
     c3e:	80 81       	ld	r24, Z
     c40:	48 2f       	mov	r20, r24
     c42:	8a 81       	ldd	r24, Y+2	; 0x02
     c44:	28 2f       	mov	r18, r24
     c46:	30 e0       	ldi	r19, 0x00	; 0
     c48:	81 e0       	ldi	r24, 0x01	; 1
     c4a:	90 e0       	ldi	r25, 0x00	; 0
     c4c:	02 2e       	mov	r0, r18
     c4e:	02 c0       	rjmp	.+4      	; 0xc54 <GPIO_writePin+0xe4>
     c50:	88 0f       	add	r24, r24
     c52:	99 1f       	adc	r25, r25
     c54:	0a 94       	dec	r0
     c56:	e2 f7       	brpl	.-8      	; 0xc50 <GPIO_writePin+0xe0>
     c58:	84 2b       	or	r24, r20
     c5a:	8c 93       	st	X, r24
     c5c:	6c c0       	rjmp	.+216    	; 0xd36 <GPIO_writePin+0x1c6>
				}
				else
				{
					CLEAR_BIT(PORTB_ID_REG,pin_num);
     c5e:	a8 e3       	ldi	r26, 0x38	; 56
     c60:	b0 e0       	ldi	r27, 0x00	; 0
     c62:	e8 e3       	ldi	r30, 0x38	; 56
     c64:	f0 e0       	ldi	r31, 0x00	; 0
     c66:	80 81       	ld	r24, Z
     c68:	48 2f       	mov	r20, r24
     c6a:	8a 81       	ldd	r24, Y+2	; 0x02
     c6c:	28 2f       	mov	r18, r24
     c6e:	30 e0       	ldi	r19, 0x00	; 0
     c70:	81 e0       	ldi	r24, 0x01	; 1
     c72:	90 e0       	ldi	r25, 0x00	; 0
     c74:	02 2e       	mov	r0, r18
     c76:	02 c0       	rjmp	.+4      	; 0xc7c <GPIO_writePin+0x10c>
     c78:	88 0f       	add	r24, r24
     c7a:	99 1f       	adc	r25, r25
     c7c:	0a 94       	dec	r0
     c7e:	e2 f7       	brpl	.-8      	; 0xc78 <GPIO_writePin+0x108>
     c80:	80 95       	com	r24
     c82:	84 23       	and	r24, r20
     c84:	8c 93       	st	X, r24
     c86:	57 c0       	rjmp	.+174    	; 0xd36 <GPIO_writePin+0x1c6>
				}
				break;
			case PORTC_ID:
				if(value == LOGIC_HIGH)
     c88:	8b 81       	ldd	r24, Y+3	; 0x03
     c8a:	81 30       	cpi	r24, 0x01	; 1
     c8c:	a1 f4       	brne	.+40     	; 0xcb6 <GPIO_writePin+0x146>
				{
					SET_BIT(PORTC_ID_REG,pin_num);
     c8e:	a5 e3       	ldi	r26, 0x35	; 53
     c90:	b0 e0       	ldi	r27, 0x00	; 0
     c92:	e5 e3       	ldi	r30, 0x35	; 53
     c94:	f0 e0       	ldi	r31, 0x00	; 0
     c96:	80 81       	ld	r24, Z
     c98:	48 2f       	mov	r20, r24
     c9a:	8a 81       	ldd	r24, Y+2	; 0x02
     c9c:	28 2f       	mov	r18, r24
     c9e:	30 e0       	ldi	r19, 0x00	; 0
     ca0:	81 e0       	ldi	r24, 0x01	; 1
     ca2:	90 e0       	ldi	r25, 0x00	; 0
     ca4:	02 2e       	mov	r0, r18
     ca6:	02 c0       	rjmp	.+4      	; 0xcac <GPIO_writePin+0x13c>
     ca8:	88 0f       	add	r24, r24
     caa:	99 1f       	adc	r25, r25
     cac:	0a 94       	dec	r0
     cae:	e2 f7       	brpl	.-8      	; 0xca8 <GPIO_writePin+0x138>
     cb0:	84 2b       	or	r24, r20
     cb2:	8c 93       	st	X, r24
     cb4:	40 c0       	rjmp	.+128    	; 0xd36 <GPIO_writePin+0x1c6>
				}
				else
				{
					CLEAR_BIT(PORTC_ID_REG,pin_num);
     cb6:	a5 e3       	ldi	r26, 0x35	; 53
     cb8:	b0 e0       	ldi	r27, 0x00	; 0
     cba:	e5 e3       	ldi	r30, 0x35	; 53
     cbc:	f0 e0       	ldi	r31, 0x00	; 0
     cbe:	80 81       	ld	r24, Z
     cc0:	48 2f       	mov	r20, r24
     cc2:	8a 81       	ldd	r24, Y+2	; 0x02
     cc4:	28 2f       	mov	r18, r24
     cc6:	30 e0       	ldi	r19, 0x00	; 0
     cc8:	81 e0       	ldi	r24, 0x01	; 1
     cca:	90 e0       	ldi	r25, 0x00	; 0
     ccc:	02 2e       	mov	r0, r18
     cce:	02 c0       	rjmp	.+4      	; 0xcd4 <GPIO_writePin+0x164>
     cd0:	88 0f       	add	r24, r24
     cd2:	99 1f       	adc	r25, r25
     cd4:	0a 94       	dec	r0
     cd6:	e2 f7       	brpl	.-8      	; 0xcd0 <GPIO_writePin+0x160>
     cd8:	80 95       	com	r24
     cda:	84 23       	and	r24, r20
     cdc:	8c 93       	st	X, r24
     cde:	2b c0       	rjmp	.+86     	; 0xd36 <GPIO_writePin+0x1c6>
				}
				break;
			case PORTD_ID:
				if(value == LOGIC_HIGH)
     ce0:	8b 81       	ldd	r24, Y+3	; 0x03
     ce2:	81 30       	cpi	r24, 0x01	; 1
     ce4:	a1 f4       	brne	.+40     	; 0xd0e <GPIO_writePin+0x19e>
				{
					SET_BIT(PORTD_ID_REG,pin_num);
     ce6:	a2 e3       	ldi	r26, 0x32	; 50
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e2 e3       	ldi	r30, 0x32	; 50
     cec:	f0 e0       	ldi	r31, 0x00	; 0
     cee:	80 81       	ld	r24, Z
     cf0:	48 2f       	mov	r20, r24
     cf2:	8a 81       	ldd	r24, Y+2	; 0x02
     cf4:	28 2f       	mov	r18, r24
     cf6:	30 e0       	ldi	r19, 0x00	; 0
     cf8:	81 e0       	ldi	r24, 0x01	; 1
     cfa:	90 e0       	ldi	r25, 0x00	; 0
     cfc:	02 2e       	mov	r0, r18
     cfe:	02 c0       	rjmp	.+4      	; 0xd04 <GPIO_writePin+0x194>
     d00:	88 0f       	add	r24, r24
     d02:	99 1f       	adc	r25, r25
     d04:	0a 94       	dec	r0
     d06:	e2 f7       	brpl	.-8      	; 0xd00 <GPIO_writePin+0x190>
     d08:	84 2b       	or	r24, r20
     d0a:	8c 93       	st	X, r24
     d0c:	14 c0       	rjmp	.+40     	; 0xd36 <GPIO_writePin+0x1c6>
				}
				else
				{
					CLEAR_BIT(PORTD_ID_REG,pin_num);
     d0e:	a2 e3       	ldi	r26, 0x32	; 50
     d10:	b0 e0       	ldi	r27, 0x00	; 0
     d12:	e2 e3       	ldi	r30, 0x32	; 50
     d14:	f0 e0       	ldi	r31, 0x00	; 0
     d16:	80 81       	ld	r24, Z
     d18:	48 2f       	mov	r20, r24
     d1a:	8a 81       	ldd	r24, Y+2	; 0x02
     d1c:	28 2f       	mov	r18, r24
     d1e:	30 e0       	ldi	r19, 0x00	; 0
     d20:	81 e0       	ldi	r24, 0x01	; 1
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	02 2e       	mov	r0, r18
     d26:	02 c0       	rjmp	.+4      	; 0xd2c <GPIO_writePin+0x1bc>
     d28:	88 0f       	add	r24, r24
     d2a:	99 1f       	adc	r25, r25
     d2c:	0a 94       	dec	r0
     d2e:	e2 f7       	brpl	.-8      	; 0xd28 <GPIO_writePin+0x1b8>
     d30:	80 95       	com	r24
     d32:	84 23       	and	r24, r20
     d34:	8c 93       	st	X, r24
				}
				break;
		}
	}
}
     d36:	0f 90       	pop	r0
     d38:	0f 90       	pop	r0
     d3a:	0f 90       	pop	r0
     d3c:	0f 90       	pop	r0
     d3e:	0f 90       	pop	r0
     d40:	cf 91       	pop	r28
     d42:	df 91       	pop	r29
     d44:	08 95       	ret

00000d46 <GPIO_readPin>:
/*** Implementation of function, use to read the pin value***/
uint8 GPIO_readPin(uint8 port_num,uint8 pin_num)
{
     d46:	df 93       	push	r29
     d48:	cf 93       	push	r28
     d4a:	00 d0       	rcall	.+0      	; 0xd4c <GPIO_readPin+0x6>
     d4c:	00 d0       	rcall	.+0      	; 0xd4e <GPIO_readPin+0x8>
     d4e:	0f 92       	push	r0
     d50:	cd b7       	in	r28, 0x3d	; 61
     d52:	de b7       	in	r29, 0x3e	; 62
     d54:	8a 83       	std	Y+2, r24	; 0x02
     d56:	6b 83       	std	Y+3, r22	; 0x03
	uint8 value = 0;
     d58:	19 82       	std	Y+1, r1	; 0x01
	if(!((port_num > 3) || (pin_num > 7)))
     d5a:	8a 81       	ldd	r24, Y+2	; 0x02
     d5c:	84 30       	cpi	r24, 0x04	; 4
     d5e:	08 f0       	brcs	.+2      	; 0xd62 <GPIO_readPin+0x1c>
     d60:	6b c0       	rjmp	.+214    	; 0xe38 <GPIO_readPin+0xf2>
     d62:	8b 81       	ldd	r24, Y+3	; 0x03
     d64:	88 30       	cpi	r24, 0x08	; 8
     d66:	08 f0       	brcs	.+2      	; 0xd6a <GPIO_readPin+0x24>
     d68:	67 c0       	rjmp	.+206    	; 0xe38 <GPIO_readPin+0xf2>
	{
		switch(port_num)
     d6a:	8a 81       	ldd	r24, Y+2	; 0x02
     d6c:	28 2f       	mov	r18, r24
     d6e:	30 e0       	ldi	r19, 0x00	; 0
     d70:	3d 83       	std	Y+5, r19	; 0x05
     d72:	2c 83       	std	Y+4, r18	; 0x04
     d74:	4c 81       	ldd	r20, Y+4	; 0x04
     d76:	5d 81       	ldd	r21, Y+5	; 0x05
     d78:	41 30       	cpi	r20, 0x01	; 1
     d7a:	51 05       	cpc	r21, r1
     d7c:	41 f1       	breq	.+80     	; 0xdce <GPIO_readPin+0x88>
     d7e:	8c 81       	ldd	r24, Y+4	; 0x04
     d80:	9d 81       	ldd	r25, Y+5	; 0x05
     d82:	82 30       	cpi	r24, 0x02	; 2
     d84:	91 05       	cpc	r25, r1
     d86:	34 f4       	brge	.+12     	; 0xd94 <GPIO_readPin+0x4e>
     d88:	2c 81       	ldd	r18, Y+4	; 0x04
     d8a:	3d 81       	ldd	r19, Y+5	; 0x05
     d8c:	21 15       	cp	r18, r1
     d8e:	31 05       	cpc	r19, r1
     d90:	61 f0       	breq	.+24     	; 0xdaa <GPIO_readPin+0x64>
     d92:	52 c0       	rjmp	.+164    	; 0xe38 <GPIO_readPin+0xf2>
     d94:	4c 81       	ldd	r20, Y+4	; 0x04
     d96:	5d 81       	ldd	r21, Y+5	; 0x05
     d98:	42 30       	cpi	r20, 0x02	; 2
     d9a:	51 05       	cpc	r21, r1
     d9c:	51 f1       	breq	.+84     	; 0xdf2 <GPIO_readPin+0xac>
     d9e:	8c 81       	ldd	r24, Y+4	; 0x04
     da0:	9d 81       	ldd	r25, Y+5	; 0x05
     da2:	83 30       	cpi	r24, 0x03	; 3
     da4:	91 05       	cpc	r25, r1
     da6:	b9 f1       	breq	.+110    	; 0xe16 <GPIO_readPin+0xd0>
     da8:	47 c0       	rjmp	.+142    	; 0xe38 <GPIO_readPin+0xf2>
		{
			case PORTA_ID:
						value = READ_BIT(PINA_ID_REG,pin_num);
     daa:	e9 e3       	ldi	r30, 0x39	; 57
     dac:	f0 e0       	ldi	r31, 0x00	; 0
     dae:	80 81       	ld	r24, Z
     db0:	28 2f       	mov	r18, r24
     db2:	30 e0       	ldi	r19, 0x00	; 0
     db4:	8b 81       	ldd	r24, Y+3	; 0x03
     db6:	88 2f       	mov	r24, r24
     db8:	90 e0       	ldi	r25, 0x00	; 0
     dba:	a9 01       	movw	r20, r18
     dbc:	02 c0       	rjmp	.+4      	; 0xdc2 <GPIO_readPin+0x7c>
     dbe:	55 95       	asr	r21
     dc0:	47 95       	ror	r20
     dc2:	8a 95       	dec	r24
     dc4:	e2 f7       	brpl	.-8      	; 0xdbe <GPIO_readPin+0x78>
     dc6:	ca 01       	movw	r24, r20
     dc8:	81 70       	andi	r24, 0x01	; 1
     dca:	89 83       	std	Y+1, r24	; 0x01
     dcc:	35 c0       	rjmp	.+106    	; 0xe38 <GPIO_readPin+0xf2>
				break;
			case PORTB_ID:
				value = READ_BIT(PINB_ID_REG,pin_num);
     dce:	e6 e3       	ldi	r30, 0x36	; 54
     dd0:	f0 e0       	ldi	r31, 0x00	; 0
     dd2:	80 81       	ld	r24, Z
     dd4:	28 2f       	mov	r18, r24
     dd6:	30 e0       	ldi	r19, 0x00	; 0
     dd8:	8b 81       	ldd	r24, Y+3	; 0x03
     dda:	88 2f       	mov	r24, r24
     ddc:	90 e0       	ldi	r25, 0x00	; 0
     dde:	a9 01       	movw	r20, r18
     de0:	02 c0       	rjmp	.+4      	; 0xde6 <GPIO_readPin+0xa0>
     de2:	55 95       	asr	r21
     de4:	47 95       	ror	r20
     de6:	8a 95       	dec	r24
     de8:	e2 f7       	brpl	.-8      	; 0xde2 <GPIO_readPin+0x9c>
     dea:	ca 01       	movw	r24, r20
     dec:	81 70       	andi	r24, 0x01	; 1
     dee:	89 83       	std	Y+1, r24	; 0x01
     df0:	23 c0       	rjmp	.+70     	; 0xe38 <GPIO_readPin+0xf2>
				break;
			case PORTC_ID:
				value = READ_BIT(PINC_ID_REG,pin_num);
     df2:	e3 e3       	ldi	r30, 0x33	; 51
     df4:	f0 e0       	ldi	r31, 0x00	; 0
     df6:	80 81       	ld	r24, Z
     df8:	28 2f       	mov	r18, r24
     dfa:	30 e0       	ldi	r19, 0x00	; 0
     dfc:	8b 81       	ldd	r24, Y+3	; 0x03
     dfe:	88 2f       	mov	r24, r24
     e00:	90 e0       	ldi	r25, 0x00	; 0
     e02:	a9 01       	movw	r20, r18
     e04:	02 c0       	rjmp	.+4      	; 0xe0a <GPIO_readPin+0xc4>
     e06:	55 95       	asr	r21
     e08:	47 95       	ror	r20
     e0a:	8a 95       	dec	r24
     e0c:	e2 f7       	brpl	.-8      	; 0xe06 <GPIO_readPin+0xc0>
     e0e:	ca 01       	movw	r24, r20
     e10:	81 70       	andi	r24, 0x01	; 1
     e12:	89 83       	std	Y+1, r24	; 0x01
     e14:	11 c0       	rjmp	.+34     	; 0xe38 <GPIO_readPin+0xf2>
				break;
			case PORTD_ID:
				value = READ_BIT(PIND_ID_REG,pin_num);
     e16:	e0 e3       	ldi	r30, 0x30	; 48
     e18:	f0 e0       	ldi	r31, 0x00	; 0
     e1a:	80 81       	ld	r24, Z
     e1c:	28 2f       	mov	r18, r24
     e1e:	30 e0       	ldi	r19, 0x00	; 0
     e20:	8b 81       	ldd	r24, Y+3	; 0x03
     e22:	88 2f       	mov	r24, r24
     e24:	90 e0       	ldi	r25, 0x00	; 0
     e26:	a9 01       	movw	r20, r18
     e28:	02 c0       	rjmp	.+4      	; 0xe2e <GPIO_readPin+0xe8>
     e2a:	55 95       	asr	r21
     e2c:	47 95       	ror	r20
     e2e:	8a 95       	dec	r24
     e30:	e2 f7       	brpl	.-8      	; 0xe2a <GPIO_readPin+0xe4>
     e32:	ca 01       	movw	r24, r20
     e34:	81 70       	andi	r24, 0x01	; 1
     e36:	89 83       	std	Y+1, r24	; 0x01
				break;
		}
	}
	return value;
     e38:	89 81       	ldd	r24, Y+1	; 0x01
}
     e3a:	0f 90       	pop	r0
     e3c:	0f 90       	pop	r0
     e3e:	0f 90       	pop	r0
     e40:	0f 90       	pop	r0
     e42:	0f 90       	pop	r0
     e44:	cf 91       	pop	r28
     e46:	df 91       	pop	r29
     e48:	08 95       	ret

00000e4a <GPIO_setupPortDirection>:
/*** Implementation of function, use to determine the port mode***/
void GPIO_setupPortDirection(uint8 port_num,GPIO_PinDircetonType direction)
{
     e4a:	df 93       	push	r29
     e4c:	cf 93       	push	r28
     e4e:	00 d0       	rcall	.+0      	; 0xe50 <GPIO_setupPortDirection+0x6>
     e50:	00 d0       	rcall	.+0      	; 0xe52 <GPIO_setupPortDirection+0x8>
     e52:	cd b7       	in	r28, 0x3d	; 61
     e54:	de b7       	in	r29, 0x3e	; 62
     e56:	89 83       	std	Y+1, r24	; 0x01
     e58:	6a 83       	std	Y+2, r22	; 0x02
	if(!(port_num > 3))
     e5a:	89 81       	ldd	r24, Y+1	; 0x01
     e5c:	84 30       	cpi	r24, 0x04	; 4
     e5e:	08 f0       	brcs	.+2      	; 0xe62 <GPIO_setupPortDirection+0x18>
     e60:	4e c0       	rjmp	.+156    	; 0xefe <GPIO_setupPortDirection+0xb4>
	{
		switch(port_num)
     e62:	89 81       	ldd	r24, Y+1	; 0x01
     e64:	28 2f       	mov	r18, r24
     e66:	30 e0       	ldi	r19, 0x00	; 0
     e68:	3c 83       	std	Y+4, r19	; 0x04
     e6a:	2b 83       	std	Y+3, r18	; 0x03
     e6c:	8b 81       	ldd	r24, Y+3	; 0x03
     e6e:	9c 81       	ldd	r25, Y+4	; 0x04
     e70:	81 30       	cpi	r24, 0x01	; 1
     e72:	91 05       	cpc	r25, r1
     e74:	09 f1       	breq	.+66     	; 0xeb8 <GPIO_setupPortDirection+0x6e>
     e76:	2b 81       	ldd	r18, Y+3	; 0x03
     e78:	3c 81       	ldd	r19, Y+4	; 0x04
     e7a:	22 30       	cpi	r18, 0x02	; 2
     e7c:	31 05       	cpc	r19, r1
     e7e:	2c f4       	brge	.+10     	; 0xe8a <GPIO_setupPortDirection+0x40>
     e80:	8b 81       	ldd	r24, Y+3	; 0x03
     e82:	9c 81       	ldd	r25, Y+4	; 0x04
     e84:	00 97       	sbiw	r24, 0x00	; 0
     e86:	61 f0       	breq	.+24     	; 0xea0 <GPIO_setupPortDirection+0x56>
     e88:	3a c0       	rjmp	.+116    	; 0xefe <GPIO_setupPortDirection+0xb4>
     e8a:	2b 81       	ldd	r18, Y+3	; 0x03
     e8c:	3c 81       	ldd	r19, Y+4	; 0x04
     e8e:	22 30       	cpi	r18, 0x02	; 2
     e90:	31 05       	cpc	r19, r1
     e92:	f1 f0       	breq	.+60     	; 0xed0 <GPIO_setupPortDirection+0x86>
     e94:	8b 81       	ldd	r24, Y+3	; 0x03
     e96:	9c 81       	ldd	r25, Y+4	; 0x04
     e98:	83 30       	cpi	r24, 0x03	; 3
     e9a:	91 05       	cpc	r25, r1
     e9c:	29 f1       	breq	.+74     	; 0xee8 <GPIO_setupPortDirection+0x9e>
     e9e:	2f c0       	rjmp	.+94     	; 0xefe <GPIO_setupPortDirection+0xb4>
		{
			case PORTA_ID:
				if(direction == PORT_OUTPUT)
     ea0:	8a 81       	ldd	r24, Y+2	; 0x02
     ea2:	8f 3f       	cpi	r24, 0xFF	; 255
     ea4:	29 f4       	brne	.+10     	; 0xeb0 <GPIO_setupPortDirection+0x66>
				{
					DDRA_ID_REG = 0XFF;
     ea6:	ea e3       	ldi	r30, 0x3A	; 58
     ea8:	f0 e0       	ldi	r31, 0x00	; 0
     eaa:	8f ef       	ldi	r24, 0xFF	; 255
     eac:	80 83       	st	Z, r24
     eae:	27 c0       	rjmp	.+78     	; 0xefe <GPIO_setupPortDirection+0xb4>
				}
				else
				{
					DDRA_ID_REG = 0;
     eb0:	ea e3       	ldi	r30, 0x3A	; 58
     eb2:	f0 e0       	ldi	r31, 0x00	; 0
     eb4:	10 82       	st	Z, r1
     eb6:	23 c0       	rjmp	.+70     	; 0xefe <GPIO_setupPortDirection+0xb4>
				}
				break;
			case PORTB_ID:
				if(direction == PORT_OUTPUT)
     eb8:	8a 81       	ldd	r24, Y+2	; 0x02
     eba:	8f 3f       	cpi	r24, 0xFF	; 255
     ebc:	29 f4       	brne	.+10     	; 0xec8 <GPIO_setupPortDirection+0x7e>
				{
					DDRB_ID_REG = 0XFF;
     ebe:	e7 e3       	ldi	r30, 0x37	; 55
     ec0:	f0 e0       	ldi	r31, 0x00	; 0
     ec2:	8f ef       	ldi	r24, 0xFF	; 255
     ec4:	80 83       	st	Z, r24
     ec6:	1b c0       	rjmp	.+54     	; 0xefe <GPIO_setupPortDirection+0xb4>
				}
				else
				{
					DDRB_ID_REG = 0;
     ec8:	e7 e3       	ldi	r30, 0x37	; 55
     eca:	f0 e0       	ldi	r31, 0x00	; 0
     ecc:	10 82       	st	Z, r1
     ece:	17 c0       	rjmp	.+46     	; 0xefe <GPIO_setupPortDirection+0xb4>
				}
				break;

			case PORTC_ID:
				if(direction == PORT_OUTPUT)
     ed0:	8a 81       	ldd	r24, Y+2	; 0x02
     ed2:	8f 3f       	cpi	r24, 0xFF	; 255
     ed4:	29 f4       	brne	.+10     	; 0xee0 <GPIO_setupPortDirection+0x96>
				{
					DDRC_ID_REG = 0XFF;
     ed6:	e4 e3       	ldi	r30, 0x34	; 52
     ed8:	f0 e0       	ldi	r31, 0x00	; 0
     eda:	8f ef       	ldi	r24, 0xFF	; 255
     edc:	80 83       	st	Z, r24
     ede:	0f c0       	rjmp	.+30     	; 0xefe <GPIO_setupPortDirection+0xb4>
				}
				else
				{
					DDRC_ID_REG = 0;
     ee0:	e4 e3       	ldi	r30, 0x34	; 52
     ee2:	f0 e0       	ldi	r31, 0x00	; 0
     ee4:	10 82       	st	Z, r1
     ee6:	0b c0       	rjmp	.+22     	; 0xefe <GPIO_setupPortDirection+0xb4>
				}
				break;
			case PORTD_ID:
				if(direction == PORT_OUTPUT)
     ee8:	8a 81       	ldd	r24, Y+2	; 0x02
     eea:	8f 3f       	cpi	r24, 0xFF	; 255
     eec:	29 f4       	brne	.+10     	; 0xef8 <GPIO_setupPortDirection+0xae>
				{
					DDRD_ID_REG = 0XFF;
     eee:	e1 e3       	ldi	r30, 0x31	; 49
     ef0:	f0 e0       	ldi	r31, 0x00	; 0
     ef2:	8f ef       	ldi	r24, 0xFF	; 255
     ef4:	80 83       	st	Z, r24
     ef6:	03 c0       	rjmp	.+6      	; 0xefe <GPIO_setupPortDirection+0xb4>
				}
				else
				{
					DDRD_ID_REG = 0;
     ef8:	e1 e3       	ldi	r30, 0x31	; 49
     efa:	f0 e0       	ldi	r31, 0x00	; 0
     efc:	10 82       	st	Z, r1
				}
				break;

		}
	}
}
     efe:	0f 90       	pop	r0
     f00:	0f 90       	pop	r0
     f02:	0f 90       	pop	r0
     f04:	0f 90       	pop	r0
     f06:	cf 91       	pop	r28
     f08:	df 91       	pop	r29
     f0a:	08 95       	ret

00000f0c <GPIO_writePort>:
/*** Implementation of function, use to write the port value***/
void GPIO_writePort(uint8 port_num,uint8 value)
{
     f0c:	df 93       	push	r29
     f0e:	cf 93       	push	r28
     f10:	00 d0       	rcall	.+0      	; 0xf12 <GPIO_writePort+0x6>
     f12:	00 d0       	rcall	.+0      	; 0xf14 <GPIO_writePort+0x8>
     f14:	cd b7       	in	r28, 0x3d	; 61
     f16:	de b7       	in	r29, 0x3e	; 62
     f18:	89 83       	std	Y+1, r24	; 0x01
     f1a:	6a 83       	std	Y+2, r22	; 0x02
	if(!(port_num > 3))
     f1c:	89 81       	ldd	r24, Y+1	; 0x01
     f1e:	84 30       	cpi	r24, 0x04	; 4
     f20:	90 f5       	brcc	.+100    	; 0xf86 <GPIO_writePort+0x7a>
	{
		switch(port_num)
     f22:	89 81       	ldd	r24, Y+1	; 0x01
     f24:	28 2f       	mov	r18, r24
     f26:	30 e0       	ldi	r19, 0x00	; 0
     f28:	3c 83       	std	Y+4, r19	; 0x04
     f2a:	2b 83       	std	Y+3, r18	; 0x03
     f2c:	8b 81       	ldd	r24, Y+3	; 0x03
     f2e:	9c 81       	ldd	r25, Y+4	; 0x04
     f30:	81 30       	cpi	r24, 0x01	; 1
     f32:	91 05       	cpc	r25, r1
     f34:	d1 f0       	breq	.+52     	; 0xf6a <GPIO_writePort+0x5e>
     f36:	2b 81       	ldd	r18, Y+3	; 0x03
     f38:	3c 81       	ldd	r19, Y+4	; 0x04
     f3a:	22 30       	cpi	r18, 0x02	; 2
     f3c:	31 05       	cpc	r19, r1
     f3e:	2c f4       	brge	.+10     	; 0xf4a <GPIO_writePort+0x3e>
     f40:	8b 81       	ldd	r24, Y+3	; 0x03
     f42:	9c 81       	ldd	r25, Y+4	; 0x04
     f44:	00 97       	sbiw	r24, 0x00	; 0
     f46:	61 f0       	breq	.+24     	; 0xf60 <GPIO_writePort+0x54>
     f48:	1e c0       	rjmp	.+60     	; 0xf86 <GPIO_writePort+0x7a>
     f4a:	2b 81       	ldd	r18, Y+3	; 0x03
     f4c:	3c 81       	ldd	r19, Y+4	; 0x04
     f4e:	22 30       	cpi	r18, 0x02	; 2
     f50:	31 05       	cpc	r19, r1
     f52:	81 f0       	breq	.+32     	; 0xf74 <GPIO_writePort+0x68>
     f54:	8b 81       	ldd	r24, Y+3	; 0x03
     f56:	9c 81       	ldd	r25, Y+4	; 0x04
     f58:	83 30       	cpi	r24, 0x03	; 3
     f5a:	91 05       	cpc	r25, r1
     f5c:	81 f0       	breq	.+32     	; 0xf7e <GPIO_writePort+0x72>
     f5e:	13 c0       	rjmp	.+38     	; 0xf86 <GPIO_writePort+0x7a>
		{
			case PORTA_ID:
				PORTA_ID_REG = value;
     f60:	eb e3       	ldi	r30, 0x3B	; 59
     f62:	f0 e0       	ldi	r31, 0x00	; 0
     f64:	8a 81       	ldd	r24, Y+2	; 0x02
     f66:	80 83       	st	Z, r24
     f68:	0e c0       	rjmp	.+28     	; 0xf86 <GPIO_writePort+0x7a>
				break;
			case PORTB_ID:
				PORTB_ID_REG = value;
     f6a:	e8 e3       	ldi	r30, 0x38	; 56
     f6c:	f0 e0       	ldi	r31, 0x00	; 0
     f6e:	8a 81       	ldd	r24, Y+2	; 0x02
     f70:	80 83       	st	Z, r24
     f72:	09 c0       	rjmp	.+18     	; 0xf86 <GPIO_writePort+0x7a>
				break;

			case PORTC_ID:
				PORTC_ID_REG = value;
     f74:	e5 e3       	ldi	r30, 0x35	; 53
     f76:	f0 e0       	ldi	r31, 0x00	; 0
     f78:	8a 81       	ldd	r24, Y+2	; 0x02
     f7a:	80 83       	st	Z, r24
     f7c:	04 c0       	rjmp	.+8      	; 0xf86 <GPIO_writePort+0x7a>
				break;
			case PORTD_ID:
				PORTD_ID_REG = value;
     f7e:	e2 e3       	ldi	r30, 0x32	; 50
     f80:	f0 e0       	ldi	r31, 0x00	; 0
     f82:	8a 81       	ldd	r24, Y+2	; 0x02
     f84:	80 83       	st	Z, r24
				break;

		}
	}
}
     f86:	0f 90       	pop	r0
     f88:	0f 90       	pop	r0
     f8a:	0f 90       	pop	r0
     f8c:	0f 90       	pop	r0
     f8e:	cf 91       	pop	r28
     f90:	df 91       	pop	r29
     f92:	08 95       	ret

00000f94 <GPIO_readPort>:
/*** Implementation of function, use to read the port value***/
uint8 GPIO_readPort(uint8 port_num)
{
     f94:	df 93       	push	r29
     f96:	cf 93       	push	r28
     f98:	00 d0       	rcall	.+0      	; 0xf9a <GPIO_readPort+0x6>
     f9a:	00 d0       	rcall	.+0      	; 0xf9c <GPIO_readPort+0x8>
     f9c:	cd b7       	in	r28, 0x3d	; 61
     f9e:	de b7       	in	r29, 0x3e	; 62
     fa0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = 0;
     fa2:	19 82       	std	Y+1, r1	; 0x01
	if(!(port_num > 3))
     fa4:	8a 81       	ldd	r24, Y+2	; 0x02
     fa6:	84 30       	cpi	r24, 0x04	; 4
     fa8:	90 f5       	brcc	.+100    	; 0x100e <GPIO_readPort+0x7a>
	{
		switch(port_num)
     faa:	8a 81       	ldd	r24, Y+2	; 0x02
     fac:	28 2f       	mov	r18, r24
     fae:	30 e0       	ldi	r19, 0x00	; 0
     fb0:	3c 83       	std	Y+4, r19	; 0x04
     fb2:	2b 83       	std	Y+3, r18	; 0x03
     fb4:	8b 81       	ldd	r24, Y+3	; 0x03
     fb6:	9c 81       	ldd	r25, Y+4	; 0x04
     fb8:	81 30       	cpi	r24, 0x01	; 1
     fba:	91 05       	cpc	r25, r1
     fbc:	d1 f0       	breq	.+52     	; 0xff2 <GPIO_readPort+0x5e>
     fbe:	2b 81       	ldd	r18, Y+3	; 0x03
     fc0:	3c 81       	ldd	r19, Y+4	; 0x04
     fc2:	22 30       	cpi	r18, 0x02	; 2
     fc4:	31 05       	cpc	r19, r1
     fc6:	2c f4       	brge	.+10     	; 0xfd2 <GPIO_readPort+0x3e>
     fc8:	8b 81       	ldd	r24, Y+3	; 0x03
     fca:	9c 81       	ldd	r25, Y+4	; 0x04
     fcc:	00 97       	sbiw	r24, 0x00	; 0
     fce:	61 f0       	breq	.+24     	; 0xfe8 <GPIO_readPort+0x54>
     fd0:	1e c0       	rjmp	.+60     	; 0x100e <GPIO_readPort+0x7a>
     fd2:	2b 81       	ldd	r18, Y+3	; 0x03
     fd4:	3c 81       	ldd	r19, Y+4	; 0x04
     fd6:	22 30       	cpi	r18, 0x02	; 2
     fd8:	31 05       	cpc	r19, r1
     fda:	81 f0       	breq	.+32     	; 0xffc <GPIO_readPort+0x68>
     fdc:	8b 81       	ldd	r24, Y+3	; 0x03
     fde:	9c 81       	ldd	r25, Y+4	; 0x04
     fe0:	83 30       	cpi	r24, 0x03	; 3
     fe2:	91 05       	cpc	r25, r1
     fe4:	81 f0       	breq	.+32     	; 0x1006 <GPIO_readPort+0x72>
     fe6:	13 c0       	rjmp	.+38     	; 0x100e <GPIO_readPort+0x7a>
		{
			case PORTA_ID:
				value = PINA_ID_REG;
     fe8:	e9 e3       	ldi	r30, 0x39	; 57
     fea:	f0 e0       	ldi	r31, 0x00	; 0
     fec:	80 81       	ld	r24, Z
     fee:	89 83       	std	Y+1, r24	; 0x01
     ff0:	0e c0       	rjmp	.+28     	; 0x100e <GPIO_readPort+0x7a>
				break;
			case PORTB_ID:
				value = PINB_ID_REG;
     ff2:	e6 e3       	ldi	r30, 0x36	; 54
     ff4:	f0 e0       	ldi	r31, 0x00	; 0
     ff6:	80 81       	ld	r24, Z
     ff8:	89 83       	std	Y+1, r24	; 0x01
     ffa:	09 c0       	rjmp	.+18     	; 0x100e <GPIO_readPort+0x7a>
				break;
			case PORTC_ID:
				value = PINC_ID_REG;
     ffc:	e3 e3       	ldi	r30, 0x33	; 51
     ffe:	f0 e0       	ldi	r31, 0x00	; 0
    1000:	80 81       	ld	r24, Z
    1002:	89 83       	std	Y+1, r24	; 0x01
    1004:	04 c0       	rjmp	.+8      	; 0x100e <GPIO_readPort+0x7a>
				break;
			case PORTD_ID:
				value = PIND_ID_REG;
    1006:	e0 e3       	ldi	r30, 0x30	; 48
    1008:	f0 e0       	ldi	r31, 0x00	; 0
    100a:	80 81       	ld	r24, Z
    100c:	89 83       	std	Y+1, r24	; 0x01
				break;
		}
	}
	return value;
    100e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1010:	0f 90       	pop	r0
    1012:	0f 90       	pop	r0
    1014:	0f 90       	pop	r0
    1016:	0f 90       	pop	r0
    1018:	cf 91       	pop	r28
    101a:	df 91       	pop	r29
    101c:	08 95       	ret

0000101e <GLOBAL_interruptEnable>:


#include "../../UTILS/common_macro.h"

void GLOBAL_interruptEnable(void)
{
    101e:	df 93       	push	r29
    1020:	cf 93       	push	r28
    1022:	cd b7       	in	r28, 0x3d	; 61
    1024:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(GLOB_INT_REGISTER,GLOB_INT_BIT);
    1026:	af e5       	ldi	r26, 0x5F	; 95
    1028:	b0 e0       	ldi	r27, 0x00	; 0
    102a:	ef e5       	ldi	r30, 0x5F	; 95
    102c:	f0 e0       	ldi	r31, 0x00	; 0
    102e:	80 81       	ld	r24, Z
    1030:	80 68       	ori	r24, 0x80	; 128
    1032:	8c 93       	st	X, r24
}
    1034:	cf 91       	pop	r28
    1036:	df 91       	pop	r29
    1038:	08 95       	ret

0000103a <GLOBAL_interruptDisable>:
void GLOBAL_interruptDisable(void)
{
    103a:	df 93       	push	r29
    103c:	cf 93       	push	r28
    103e:	cd b7       	in	r28, 0x3d	; 61
    1040:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(GLOB_INT_REGISTER,GLOB_INT_BIT);
    1042:	af e5       	ldi	r26, 0x5F	; 95
    1044:	b0 e0       	ldi	r27, 0x00	; 0
    1046:	ef e5       	ldi	r30, 0x5F	; 95
    1048:	f0 e0       	ldi	r31, 0x00	; 0
    104a:	80 81       	ld	r24, Z
    104c:	8f 77       	andi	r24, 0x7F	; 127
    104e:	8c 93       	st	X, r24
}
    1050:	cf 91       	pop	r28
    1052:	df 91       	pop	r29
    1054:	08 95       	ret

00001056 <LED_initForPin>:
#endif
/***************** For each led ************************/
#if PIN_TO_LED      ==      ENABLE
/*** This is implementation of function use to set the the pin direction to output pin ***/
uint8 LED_initForPin(uint8 selectPort,uint8 selectPin)
{
    1056:	df 93       	push	r29
    1058:	cf 93       	push	r28
    105a:	00 d0       	rcall	.+0      	; 0x105c <LED_initForPin+0x6>
    105c:	0f 92       	push	r0
    105e:	cd b7       	in	r28, 0x3d	; 61
    1060:	de b7       	in	r29, 0x3e	; 62
    1062:	8a 83       	std	Y+2, r24	; 0x02
    1064:	6b 83       	std	Y+3, r22	; 0x03
	uint8 ErrorState = NOTOK;
    1066:	19 82       	std	Y+1, r1	; 0x01
	if(((selectPort >= PORTA_ID) && (selectPort <= PORTD_ID)) && ((selectPin >= PIN0) && (selectPin <= PIN7)))
    1068:	8a 81       	ldd	r24, Y+2	; 0x02
    106a:	84 30       	cpi	r24, 0x04	; 4
    106c:	70 f4       	brcc	.+28     	; 0x108a <LED_initForPin+0x34>
    106e:	8b 81       	ldd	r24, Y+3	; 0x03
    1070:	88 30       	cpi	r24, 0x08	; 8
    1072:	58 f4       	brcc	.+22     	; 0x108a <LED_initForPin+0x34>
	{
		/********** Set the pin direction *******/
		GPIO_setupPinDirection(selectPort,selectPin,PIN_OUTPUT);
    1074:	8a 81       	ldd	r24, Y+2	; 0x02
    1076:	6b 81       	ldd	r22, Y+3	; 0x03
    1078:	41 e0       	ldi	r20, 0x01	; 1
    107a:	0e 94 cd 04 	call	0x99a	; 0x99a <GPIO_setupPinDirection>
		/**** Close the led in the first  *********/
		LED_offFunction(selectPort,selectPin);
    107e:	8a 81       	ldd	r24, Y+2	; 0x02
    1080:	6b 81       	ldd	r22, Y+3	; 0x03
    1082:	0e 94 99 08 	call	0x1132	; 0x1132 <LED_offFunction>
		ErrorState = OK;
    1086:	81 e0       	ldi	r24, 0x01	; 1
    1088:	89 83       	std	Y+1, r24	; 0x01
	}
	return ErrorState;
    108a:	89 81       	ldd	r24, Y+1	; 0x01
}
    108c:	0f 90       	pop	r0
    108e:	0f 90       	pop	r0
    1090:	0f 90       	pop	r0
    1092:	cf 91       	pop	r28
    1094:	df 91       	pop	r29
    1096:	08 95       	ret

00001098 <LED_enable>:
/*** The implementation of function use to set the state for led ***/
uint8 LED_enable(uint8 selectPort,uint8 selectPin,uint8 ledState)
{
    1098:	df 93       	push	r29
    109a:	cf 93       	push	r28
    109c:	00 d0       	rcall	.+0      	; 0x109e <LED_enable+0x6>
    109e:	00 d0       	rcall	.+0      	; 0x10a0 <LED_enable+0x8>
    10a0:	00 d0       	rcall	.+0      	; 0x10a2 <LED_enable+0xa>
    10a2:	cd b7       	in	r28, 0x3d	; 61
    10a4:	de b7       	in	r29, 0x3e	; 62
    10a6:	8a 83       	std	Y+2, r24	; 0x02
    10a8:	6b 83       	std	Y+3, r22	; 0x03
    10aa:	4c 83       	std	Y+4, r20	; 0x04
	uint8 ErrorState = NOTOK;
    10ac:	19 82       	std	Y+1, r1	; 0x01
	if(((selectPort >= PORTA_ID) && (selectPort <= PORTD_ID)) && ((selectPin >= PIN0) && (selectPin <= PIN7)))
    10ae:	8a 81       	ldd	r24, Y+2	; 0x02
    10b0:	84 30       	cpi	r24, 0x04	; 4
    10b2:	20 f5       	brcc	.+72     	; 0x10fc <LED_enable+0x64>
    10b4:	8b 81       	ldd	r24, Y+3	; 0x03
    10b6:	88 30       	cpi	r24, 0x08	; 8
    10b8:	08 f5       	brcc	.+66     	; 0x10fc <LED_enable+0x64>
	{
		switch(ledState)
    10ba:	8c 81       	ldd	r24, Y+4	; 0x04
    10bc:	28 2f       	mov	r18, r24
    10be:	30 e0       	ldi	r19, 0x00	; 0
    10c0:	3e 83       	std	Y+6, r19	; 0x06
    10c2:	2d 83       	std	Y+5, r18	; 0x05
    10c4:	8d 81       	ldd	r24, Y+5	; 0x05
    10c6:	9e 81       	ldd	r25, Y+6	; 0x06
    10c8:	81 30       	cpi	r24, 0x01	; 1
    10ca:	91 05       	cpc	r25, r1
    10cc:	71 f0       	breq	.+28     	; 0x10ea <LED_enable+0x52>
    10ce:	2d 81       	ldd	r18, Y+5	; 0x05
    10d0:	3e 81       	ldd	r19, Y+6	; 0x06
    10d2:	22 30       	cpi	r18, 0x02	; 2
    10d4:	31 05       	cpc	r19, r1
    10d6:	71 f0       	breq	.+28     	; 0x10f4 <LED_enable+0x5c>
    10d8:	8d 81       	ldd	r24, Y+5	; 0x05
    10da:	9e 81       	ldd	r25, Y+6	; 0x06
    10dc:	00 97       	sbiw	r24, 0x00	; 0
    10de:	71 f4       	brne	.+28     	; 0x10fc <LED_enable+0x64>
		{
		case LED_OFF:LED_offFunction(selectPort,selectPin);break;
    10e0:	8a 81       	ldd	r24, Y+2	; 0x02
    10e2:	6b 81       	ldd	r22, Y+3	; 0x03
    10e4:	0e 94 99 08 	call	0x1132	; 0x1132 <LED_offFunction>
    10e8:	09 c0       	rjmp	.+18     	; 0x10fc <LED_enable+0x64>
		case LED_ON:LED_onFunction(selectPort,selectPin);break;
    10ea:	8a 81       	ldd	r24, Y+2	; 0x02
    10ec:	6b 81       	ldd	r22, Y+3	; 0x03
    10ee:	0e 94 88 08 	call	0x1110	; 0x1110 <LED_onFunction>
    10f2:	04 c0       	rjmp	.+8      	; 0x10fc <LED_enable+0x64>
		case LED_TOGGLE:LED_toggleFunction(selectPort,selectPin);break;
    10f4:	8a 81       	ldd	r24, Y+2	; 0x02
    10f6:	6b 81       	ldd	r22, Y+3	; 0x03
    10f8:	0e 94 aa 08 	call	0x1154	; 0x1154 <LED_toggleFunction>
		ErrorState = OK;
		}
	}
	return ErrorState;
    10fc:	89 81       	ldd	r24, Y+1	; 0x01
}
    10fe:	26 96       	adiw	r28, 0x06	; 6
    1100:	0f b6       	in	r0, 0x3f	; 63
    1102:	f8 94       	cli
    1104:	de bf       	out	0x3e, r29	; 62
    1106:	0f be       	out	0x3f, r0	; 63
    1108:	cd bf       	out	0x3d, r28	; 61
    110a:	cf 91       	pop	r28
    110c:	df 91       	pop	r29
    110e:	08 95       	ret

00001110 <LED_onFunction>:
/*** This function use to on the led ***/
static void LED_onFunction(uint8 selectPort,uint8 selectPin)
{
    1110:	df 93       	push	r29
    1112:	cf 93       	push	r28
    1114:	00 d0       	rcall	.+0      	; 0x1116 <LED_onFunction+0x6>
    1116:	cd b7       	in	r28, 0x3d	; 61
    1118:	de b7       	in	r29, 0x3e	; 62
    111a:	89 83       	std	Y+1, r24	; 0x01
    111c:	6a 83       	std	Y+2, r22	; 0x02
#if	LOGIC_OF_LED    ==    POSITIVE_LOGIC
	GPIO_writePin(selectPort,selectPin,LOGIC_HIGH);
    111e:	89 81       	ldd	r24, Y+1	; 0x01
    1120:	6a 81       	ldd	r22, Y+2	; 0x02
    1122:	41 e0       	ldi	r20, 0x01	; 1
    1124:	0e 94 b8 05 	call	0xb70	; 0xb70 <GPIO_writePin>
#elif LOGIC_OF_LED    ==    NEGATIVE_LOGIC
	GPIO_writePin(selectPort,selectPin,LOGIC_LOW);
#endif
}
    1128:	0f 90       	pop	r0
    112a:	0f 90       	pop	r0
    112c:	cf 91       	pop	r28
    112e:	df 91       	pop	r29
    1130:	08 95       	ret

00001132 <LED_offFunction>:
/*** This function use to off the led ***/
static void LED_offFunction(uint8 selectPort,uint8 selectPin)
{
    1132:	df 93       	push	r29
    1134:	cf 93       	push	r28
    1136:	00 d0       	rcall	.+0      	; 0x1138 <LED_offFunction+0x6>
    1138:	cd b7       	in	r28, 0x3d	; 61
    113a:	de b7       	in	r29, 0x3e	; 62
    113c:	89 83       	std	Y+1, r24	; 0x01
    113e:	6a 83       	std	Y+2, r22	; 0x02
#if	LOGIC_OF_LED    ==    POSITIVE_LOGIC
	GPIO_writePin(selectPort,selectPin,LOGIC_LOW);
    1140:	89 81       	ldd	r24, Y+1	; 0x01
    1142:	6a 81       	ldd	r22, Y+2	; 0x02
    1144:	40 e0       	ldi	r20, 0x00	; 0
    1146:	0e 94 b8 05 	call	0xb70	; 0xb70 <GPIO_writePin>
#elif LOGIC_OF_LED    ==    NEGATIVE_LOGIC
	GPIO_writePin(selectPort,selectPin,LOGIC_HIGH);
#endif
}
    114a:	0f 90       	pop	r0
    114c:	0f 90       	pop	r0
    114e:	cf 91       	pop	r28
    1150:	df 91       	pop	r29
    1152:	08 95       	ret

00001154 <LED_toggleFunction>:
/*** This function use to toggle the led ***/
static void LED_toggleFunction(uint8 selectPort,uint8 selectPin)
{
    1154:	df 93       	push	r29
    1156:	cf 93       	push	r28
    1158:	00 d0       	rcall	.+0      	; 0x115a <LED_toggleFunction+0x6>
    115a:	cd b7       	in	r28, 0x3d	; 61
    115c:	de b7       	in	r29, 0x3e	; 62
    115e:	89 83       	std	Y+1, r24	; 0x01
    1160:	6a 83       	std	Y+2, r22	; 0x02
	static uint8 flag = 1;
	if(flag)
    1162:	80 91 60 00 	lds	r24, 0x0060
    1166:	88 23       	and	r24, r24
    1168:	41 f0       	breq	.+16     	; 0x117a <LED_toggleFunction+0x26>
	{
		GPIO_writePin(selectPort,selectPin,LOGIC_HIGH);
    116a:	89 81       	ldd	r24, Y+1	; 0x01
    116c:	6a 81       	ldd	r22, Y+2	; 0x02
    116e:	41 e0       	ldi	r20, 0x01	; 1
    1170:	0e 94 b8 05 	call	0xb70	; 0xb70 <GPIO_writePin>
		flag = 0;
    1174:	10 92 60 00 	sts	0x0060, r1
    1178:	08 c0       	rjmp	.+16     	; 0x118a <LED_toggleFunction+0x36>
	}
	else
	{
		GPIO_writePin(selectPort,selectPin,LOGIC_LOW);
    117a:	89 81       	ldd	r24, Y+1	; 0x01
    117c:	6a 81       	ldd	r22, Y+2	; 0x02
    117e:	40 e0       	ldi	r20, 0x00	; 0
    1180:	0e 94 b8 05 	call	0xb70	; 0xb70 <GPIO_writePin>
		flag = 1;
    1184:	81 e0       	ldi	r24, 0x01	; 1
    1186:	80 93 60 00 	sts	0x0060, r24
	}
}
    118a:	0f 90       	pop	r0
    118c:	0f 90       	pop	r0
    118e:	cf 91       	pop	r28
    1190:	df 91       	pop	r29
    1192:	08 95       	ret

00001194 <main>:
/*** The prototype of Passed function to Task 2 ***/
void TASK_function2(void);
/*** The prototype of Passed function to Task 3 ***/
void TASK_function3(void);
void main(void)
{
    1194:	df 93       	push	r29
    1196:	cf 93       	push	r28
    1198:	cd b7       	in	r28, 0x3d	; 61
    119a:	de b7       	in	r29, 0x3e	; 62
/*** Enable the Global interrupt ***/
	GLOBAL_interruptEnable();
    119c:	0e 94 0f 08 	call	0x101e	; 0x101e <GLOBAL_interruptEnable>
/*** Active the First led for the First task ***/
	LED_initForPin(PORTA_ID,PIN0);
    11a0:	80 e0       	ldi	r24, 0x00	; 0
    11a2:	60 e0       	ldi	r22, 0x00	; 0
    11a4:	0e 94 2b 08 	call	0x1056	; 0x1056 <LED_initForPin>
/*** Active the Second led for the Second task ***/
	LED_initForPin(PORTA_ID,PIN1);
    11a8:	80 e0       	ldi	r24, 0x00	; 0
    11aa:	61 e0       	ldi	r22, 0x01	; 1
    11ac:	0e 94 2b 08 	call	0x1056	; 0x1056 <LED_initForPin>
/*** Active the Third led for the Third task ***/
	LED_initForPin(PORTA_ID,PIN2);
    11b0:	80 e0       	ldi	r24, 0x00	; 0
    11b2:	62 e0       	ldi	r22, 0x02	; 2
    11b4:	0e 94 2b 08 	call	0x1056	; 0x1056 <LED_initForPin>
/*** The initial function to handle the Scheduler setting ***/
	SCHEDULER_init();
    11b8:	0e 94 49 00 	call	0x92	; 0x92 <SCHEDULER_init>
 * Run the first task by TCB:
 * 1- priority -> 0
 * 2- First Delay -> 300 ms
 * 3- periodicity -> 500 ms
 */
	TASK_controlBlockOfTask(0,500,300,&TASK_function1);
    11bc:	2a ef       	ldi	r18, 0xFA	; 250
    11be:	38 e0       	ldi	r19, 0x08	; 8
    11c0:	80 e0       	ldi	r24, 0x00	; 0
    11c2:	64 ef       	ldi	r22, 0xF4	; 244
    11c4:	71 e0       	ldi	r23, 0x01	; 1
    11c6:	4c e2       	ldi	r20, 0x2C	; 44
    11c8:	51 e0       	ldi	r21, 0x01	; 1
    11ca:	0e 94 60 00 	call	0xc0	; 0xc0 <TASK_controlBlockOfTask>
 * Run the first task by TCB:
* 1- priority -> 1
* 2- First Delay -> 350 ms
* 3- periodicity -> 1500 ms
*/
	TASK_controlBlockOfTask(1,1500,350,&TASK_function2);
    11ce:	26 e0       	ldi	r18, 0x06	; 6
    11d0:	39 e0       	ldi	r19, 0x09	; 9
    11d2:	81 e0       	ldi	r24, 0x01	; 1
    11d4:	6c ed       	ldi	r22, 0xDC	; 220
    11d6:	75 e0       	ldi	r23, 0x05	; 5
    11d8:	4e e5       	ldi	r20, 0x5E	; 94
    11da:	51 e0       	ldi	r21, 0x01	; 1
    11dc:	0e 94 60 00 	call	0xc0	; 0xc0 <TASK_controlBlockOfTask>
* Run the first task by TCB:
* 1- priority -> 2
* 2- First Delay -> 1000 ms
* 3- periodicity -> 1700 ms
*/
	TASK_controlBlockOfTask(2,1700,1000,&TASK_function3);
    11e0:	22 e1       	ldi	r18, 0x12	; 18
    11e2:	39 e0       	ldi	r19, 0x09	; 9
    11e4:	82 e0       	ldi	r24, 0x02	; 2
    11e6:	64 ea       	ldi	r22, 0xA4	; 164
    11e8:	76 e0       	ldi	r23, 0x06	; 6
    11ea:	48 ee       	ldi	r20, 0xE8	; 232
    11ec:	53 e0       	ldi	r21, 0x03	; 3
    11ee:	0e 94 60 00 	call	0xc0	; 0xc0 <TASK_controlBlockOfTask>
    11f2:	ff cf       	rjmp	.-2      	; 0x11f2 <main+0x5e>

000011f4 <TASK_function1>:
	while(1);
}
/*** The implementation of Passed function to Task 1 ***/
void TASK_function1(void)
{
    11f4:	df 93       	push	r29
    11f6:	cf 93       	push	r28
    11f8:	cd b7       	in	r28, 0x3d	; 61
    11fa:	de b7       	in	r29, 0x3e	; 62
	/*** The function used to toggle led ***/
	LED_enable(PORTA_ID,PIN0,LED_TOGGLE);
    11fc:	80 e0       	ldi	r24, 0x00	; 0
    11fe:	60 e0       	ldi	r22, 0x00	; 0
    1200:	42 e0       	ldi	r20, 0x02	; 2
    1202:	0e 94 4c 08 	call	0x1098	; 0x1098 <LED_enable>
}
    1206:	cf 91       	pop	r28
    1208:	df 91       	pop	r29
    120a:	08 95       	ret

0000120c <TASK_function2>:
/*** The implementation of Passed function to Task 2 ***/
void TASK_function2(void)
{
    120c:	df 93       	push	r29
    120e:	cf 93       	push	r28
    1210:	cd b7       	in	r28, 0x3d	; 61
    1212:	de b7       	in	r29, 0x3e	; 62
	/*** The function used to toggle led ***/
	LED_enable(PORTA_ID,PIN1,LED_TOGGLE);
    1214:	80 e0       	ldi	r24, 0x00	; 0
    1216:	61 e0       	ldi	r22, 0x01	; 1
    1218:	42 e0       	ldi	r20, 0x02	; 2
    121a:	0e 94 4c 08 	call	0x1098	; 0x1098 <LED_enable>
}
    121e:	cf 91       	pop	r28
    1220:	df 91       	pop	r29
    1222:	08 95       	ret

00001224 <TASK_function3>:
/*** The implementation of Passed function to Task 3 ***/
void TASK_function3(void)
{
    1224:	df 93       	push	r29
    1226:	cf 93       	push	r28
    1228:	cd b7       	in	r28, 0x3d	; 61
    122a:	de b7       	in	r29, 0x3e	; 62
	/*** The function used to toggle led ***/
	LED_enable(PORTA_ID,PIN2,LED_TOGGLE);
    122c:	80 e0       	ldi	r24, 0x00	; 0
    122e:	62 e0       	ldi	r22, 0x02	; 2
    1230:	42 e0       	ldi	r20, 0x02	; 2
    1232:	0e 94 4c 08 	call	0x1098	; 0x1098 <LED_enable>
}
    1236:	cf 91       	pop	r28
    1238:	df 91       	pop	r29
    123a:	08 95       	ret

0000123c <_exit>:
    123c:	f8 94       	cli

0000123e <__stop_program>:
    123e:	ff cf       	rjmp	.-2      	; 0x123e <__stop_program>
